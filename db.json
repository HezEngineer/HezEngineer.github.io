{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/img/CI/tomcat.png","path":"img/CI/tomcat.png","modified":0,"renderable":0},{"_id":"source/img/CI/tomcat1.png","path":"img/CI/tomcat1.png","modified":0,"renderable":0},{"_id":"themes/material/source/fonts/MaterialIcons-Regular.woff","path":"fonts/MaterialIcons-Regular.woff","modified":0,"renderable":1},{"_id":"themes/material/source/fonts/MaterialIcons-Regular.woff2","path":"fonts/MaterialIcons-Regular.woff2","modified":0,"renderable":1},{"_id":"themes/material/source/css/duoshuo.css","path":"css/duoshuo.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/duoshuo.min.css","path":"css/duoshuo.min.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/ie-blocker.css","path":"css/ie-blocker.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/gallery.min.css","path":"css/gallery.min.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/uc.css","path":"css/uc.css","modified":0,"renderable":1},{"_id":"themes/material/source/img/avatar.png","path":"img/avatar.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/avatarluffy.png","path":"img/avatarluffy.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/favicon.png","path":"img/favicon.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/bg.png","path":"img/bg.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/logo.png","path":"img/logo.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/joba.png","path":"img/joba.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/joba1.png","path":"img/joba1.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/luffy1.png","path":"img/luffy1.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/luobin.png","path":"img/luobin.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/upyun_logo.png","path":"img/upyun_logo.png","modified":0,"renderable":1},{"_id":"themes/material/source/js/ie-blocker.en.js","path":"js/ie-blocker.en.js","modified":0,"renderable":1},{"_id":"themes/material/source/img/zoro.png","path":"img/zoro.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/sidebar_header.png","path":"img/sidebar_header.png","modified":0,"renderable":1},{"_id":"themes/material/source/js/ie-blocker.zhCN.js","path":"js/ie-blocker.zhCN.js","modified":0,"renderable":1},{"_id":"themes/material/source/js/lazyload.min.js","path":"js/lazyload.min.js","modified":0,"renderable":1},{"_id":"themes/material/source/js/queue.js","path":"js/queue.js","modified":0,"renderable":1},{"_id":"themes/material/source/js/ripple.js","path":"js/ripple.js","modified":0,"renderable":1},{"_id":"themes/material/source/js/nprogress.js","path":"js/nprogress.js","modified":0,"renderable":1},{"_id":"themes/material/source/js/smoothscroll.js","path":"js/smoothscroll.js","modified":0,"renderable":1},{"_id":"themes/material/source/fonts/MaterialIcons-Regular.ttf","path":"fonts/MaterialIcons-Regular.ttf","modified":0,"renderable":1},{"_id":"themes/material/source/fonts/fontawesome-webfont.eot","path":"fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/material/source/fonts/fontawesome-webfont.woff","path":"fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/material/source/fonts/fontawesome-webfont.woff2","path":"fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/material/source/css/style.css","path":"css/style.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/material.min.css","path":"css/material.min.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/style.min.css","path":"css/style.min.css","modified":0,"renderable":1},{"_id":"themes/material/source/img/android-logo.png","path":"img/android-logo.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/daily_pic.png","path":"img/daily_pic.png","modified":0,"renderable":1},{"_id":"themes/material/source/js/jquery.min.js","path":"js/jquery.min.js","modified":0,"renderable":1},{"_id":"themes/material/source/js/js.min.js","path":"js/js.min.js","modified":0,"renderable":1},{"_id":"themes/material/source/js/js.js","path":"js/js.js","modified":0,"renderable":1},{"_id":"themes/material/source/fonts/MaterialIcons-Regular.eot","path":"fonts/MaterialIcons-Regular.eot","modified":0,"renderable":1},{"_id":"themes/material/source/fonts/fontawesome-webfont.ttf","path":"fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/material/source/css/material.css","path":"css/material.css","modified":0,"renderable":1},{"_id":"themes/material/source/img/footer/footer_ico-github.png","path":"img/footer/footer_ico-github.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/footer/footer_ico-bilibili.png","path":"img/footer/footer_ico-bilibili.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/footer/footer_ico-gplus.png","path":"img/footer/footer_ico-gplus.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/footer/footer_ico-facebook.png","path":"img/footer/footer_ico-facebook.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/footer/footer_ico-instagram.png","path":"img/footer/footer_ico-instagram.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/footer/footer_ico-linkedin.png","path":"img/footer/footer_ico-linkedin.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/footer/footer_ico-telegram.png","path":"img/footer/footer_ico-telegram.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/footer/footer_ico-twitter.png","path":"img/footer/footer_ico-twitter.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/footer/footer_ico-weibo.png","path":"img/footer/footer_ico-weibo.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/footer/footer_ico-tumblr.png","path":"img/footer/footer_ico-tumblr.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/footer/footer_ico-zhihu.png","path":"img/footer/footer_ico-zhihu.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/gallery/close.svg","path":"img/gallery/close.svg","modified":0,"renderable":1},{"_id":"themes/material/source/img/gallery/arrow.svg","path":"img/gallery/arrow.svg","modified":0,"renderable":1},{"_id":"themes/material/source/img/gallery/spinner.svg","path":"img/gallery/spinner.svg","modified":0,"renderable":1},{"_id":"themes/material/source/js/gallery/jquery.poptrox.min.js","path":"js/gallery/jquery.poptrox.min.js","modified":0,"renderable":1},{"_id":"themes/material/source/img/luobin1.png","path":"img/luobin1.png","modified":0,"renderable":1},{"_id":"themes/material/source/js/gallery/jquery.scrollstop.min.js","path":"js/gallery/jquery.scrollstop.min.js","modified":0,"renderable":1},{"_id":"themes/material/source/js/gallery/main.min.js","path":"js/gallery/main.min.js","modified":0,"renderable":1},{"_id":"themes/material/source/js/gallery/util.min.js","path":"js/gallery/util.min.js","modified":0,"renderable":1},{"_id":"themes/material/source/js/gallery/skel.min.js","path":"js/gallery/skel.min.js","modified":0,"renderable":1},{"_id":"themes/material/source/fonts/FontAwesome.otf","path":"fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/material-13.png","path":"img/random/material-13.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/material-15.png","path":"img/random/material-15.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/material-16.png","path":"img/random/material-16.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/material-17.png","path":"img/random/material-17.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/material-6.png","path":"img/random/material-6.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/material-12.png","path":"img/random/material-12.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/material-4.png","path":"img/random/material-4.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/material-3.png","path":"img/random/material-3.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/material-9.png","path":"img/random/material-9.png","modified":0,"renderable":1},{"_id":"themes/material/source/fonts/fontawesome-webfont.svg","path":"fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/material-10.png","path":"img/random/material-10.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/material-19.png","path":"img/random/material-19.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/material-8.png","path":"img/random/material-8.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/material-11.png","path":"img/random/material-11.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/material-2.png","path":"img/random/material-2.png","modified":0,"renderable":1},{"_id":"themes/material/source/fonts/Roboto-Medium.ttf","path":"fonts/Roboto-Medium.ttf","modified":0,"renderable":1},{"_id":"themes/material/source/fonts/Roboto-Regular.ttf","path":"fonts/Roboto-Regular.ttf","modified":0,"renderable":1},{"_id":"themes/material/source/fonts/Roboto-Bold.ttf","path":"fonts/Roboto-Bold.ttf","modified":0,"renderable":1},{"_id":"themes/material/source/fonts/Roboto-Thin.ttf","path":"fonts/Roboto-Thin.ttf","modified":0,"renderable":1},{"_id":"themes/material/source/fonts/Roboto-Black.ttf","path":"fonts/Roboto-Black.ttf","modified":0,"renderable":1},{"_id":"themes/material/source/fonts/Roboto-Light.ttf","path":"fonts/Roboto-Light.ttf","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/material-1.png","path":"img/random/material-1.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/material-7.png","path":"img/random/material-7.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/material-5.png","path":"img/random/material-5.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/material-18.png","path":"img/random/material-18.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/material-14.png","path":"img/random/material-14.png","modified":0,"renderable":1}],"Cache":[{"_id":"themes/material/.travis.yml","hash":"93eb4648349274ffda0c146bbc019d1d2cd57ca3","modified":1621862494271},{"_id":"themes/material/.eslintrc.json","hash":"83ddc0cdc18f28b967795b8dac0421a52cdf7ece","modified":1621862494271},{"_id":"themes/material/.gitignore","hash":"0e2700b8bcca0c252b8bcac0aea92a806a009986","modified":1621862494271},{"_id":"source/.DS_Store","hash":"cc51320acdb018228bb8df8c8392faa087958120","modified":1621862527697},{"_id":"themes/material/README.md","hash":"e6e98e6732fbeadb97c6fc1b073adaefa0b6c03c","modified":1621862494272},{"_id":"themes/material/_config.template.yml","hash":"1f452b122d5ed0f29126619bbe765d8dc99b7a15","modified":1622025180851},{"_id":"themes/material/_config.yml","hash":"1f452b122d5ed0f29126619bbe765d8dc99b7a15","modified":1622025132718},{"_id":"themes/material/CONTRIBUTING.md","hash":"148f555e47d4725fe1faac775107a4d7b03f7136","modified":1621862494271},{"_id":"themes/material/contributing.json","hash":"1bc0871b1c7822b82533b614090ac0ab7c55282c","modified":1621862494272},{"_id":"themes/material/LICENSE","hash":"12d81f50767d4e09aa7877da077ad9d1b915d75b","modified":1621862494272},{"_id":"themes/material/CONTRIBUTING.zh-cn.md","hash":"ef3ccef0451d6ac616b3a35fbfedb6abd35e6b41","modified":1621862494271},{"_id":"themes/material/package.json","hash":"55657088c82f9c81215ac3e336c407eac75fe842","modified":1621862494311},{"_id":"themes/material/lint.sh","hash":"49c3a65f8ca65754ec7fefcd2dcb6adc187f3856","modified":1621862494311},{"_id":"source/_posts/TextView的drawable属性.md","hash":"e2b00be19264f0b1eea127c8b29517e1ce75d984","modified":1622023673775},{"_id":"source/_posts/git.md","hash":"0a02bec3069f20e200afdd6437867c975d9ff003","modified":1621862494270},{"_id":"source/_posts/Jenkin + Git + Gradle 为 Android 项目搭建 CI 环境.md","hash":"adcfc0be64dedb950c6f5df6aa64479b4ded79cc","modified":1622025291392},{"_id":"source/_posts/Android 登录界面随软键盘弹出滑动.md","hash":"374005d35d0773d6affbda2bc20304d99c13e6a8","modified":1622025266938},{"_id":"source/_posts/博客搭建-hexo-Github-多机同步.md","hash":"d99b62d9d615e2a0dcd486657a9e900c722f5c11","modified":1622023660700},{"_id":"source/_posts/training-Graphics-Animation-Bitmaps-1.md","hash":"1158b174836f4bbdb704f551f48b70ede3a6a63e","modified":1622025306111},{"_id":"source/_posts/译-Building Instrumented Unit Test.md","hash":"ed95c82374bd1b1180d8ff579ea8babaef446b49","modified":1622023636992},{"_id":"source/categories/index.md","hash":"dbcb6aabb4a798fd42313d987d9e24a05f41148f","modified":1622023656213},{"_id":"source/_posts/译-Building Local Unit Test.md","hash":"c763de0f8654b4e51b698145facdfc4ec5d44549","modified":1622023642628},{"_id":"source/tags/index.md","hash":"55021e3fb2638d6033de1be9bb208d8611d3b4d8","modified":1622023315538},{"_id":"themes/material/languages/ar.yml","hash":"6df33c661d97cb096a2b8a338fd42c6b7cf72e19","modified":1621862494303},{"_id":"themes/material/languages/de.yml","hash":"d7483dc78b2477de3f1d5b4675ff12f2bd47b937","modified":1621862494303},{"_id":"themes/material/languages/en.yml","hash":"518822aada4fbe8f5af85243d5e0b73b79a288d3","modified":1621862494303},{"_id":"themes/material/languages/es.yml","hash":"e24ab8de3d9cd71548adefa11b179ab0c6e3dd2c","modified":1621862494304},{"_id":"themes/material/languages/ja.yml","hash":"062cfff0e32bdb64f27f6f18e552d118eabdf95a","modified":1621862494304},{"_id":"themes/material/languages/ms.yml","hash":"c78fd5335e9008e1195c5784b597b68c1d39429a","modified":1621862494304},{"_id":"themes/material/languages/fr.yml","hash":"dd8c477e656c50e9dced6b7f439d284392213d2b","modified":1621862494304},{"_id":"themes/material/languages/zh-CN.yml","hash":"a00f0d1cae67c9e7b14a26a408de768b7362082e","modified":1621862494304},{"_id":"themes/material/languages/pt-BR.yml","hash":"ce712c6d79c3d3243b5ae189d2fa7c0adfcb8a25","modified":1621862494304},{"_id":"themes/material/img/avatar.png","hash":"bf483b0d495dbbcfb308348a945818e1c1cc9696","modified":1621862494273},{"_id":"themes/material/languages/zh-TW.yml","hash":"cbd420929699cf6be1d05b211a151e17e87dfc87","modified":1621862494304},{"_id":"themes/material/img/avatarluffy.png","hash":"171aba4451fa8b5d1e17df86a378e61c0eab77c9","modified":1621862494273},{"_id":"themes/material/img/bg.png","hash":"a32f9717e19e821a4030ade551dc2917c889fcd8","modified":1621862494273},{"_id":"themes/material/img/favicon.png","hash":"b1bcc84cedb2a618e8db93559ce7d58f9274085d","modified":1621862494274},{"_id":"themes/material/img/logo.png","hash":"b1bcc84cedb2a618e8db93559ce7d58f9274085d","modified":1621862494276},{"_id":"themes/material/img/joba1.png","hash":"68b1e0b86eb09ea472b0243fbadc0a8698cbd177","modified":1621862494276},{"_id":"themes/material/img/joba.png","hash":"f527e1dd3dd1bb30c871e39ea0267882666a5a1f","modified":1621862494276},{"_id":"themes/material/img/luffy1.png","hash":"ee47a79b8bb922bcbf61b6a6ff18abe9988bdcf8","modified":1621862494277},{"_id":"themes/material/img/luobin.png","hash":"a43190333b9f90eb6ce6c77374b5b859d18292dd","modified":1621862494277},{"_id":"themes/material/img/zoro.png","hash":"bf1c427d98c3f71d04f61ca508ce573f806a6187","modified":1621862494303},{"_id":"themes/material/img/upyun_logo.png","hash":"aee4e90c4e2e72ef7036668c52dabcd8d028ee2f","modified":1621862494303},{"_id":"themes/material/img/sidebar_header.png","hash":"c47f4d39f421c0a950279d050ae82f9ae6dd19ff","modified":1621862494302},{"_id":"themes/material/layout/index.ejs","hash":"d7d43486602cc0d0105ed660cba6e42d91cd252b","modified":1621862494311},{"_id":"themes/material/layout/post.ejs","hash":"2d0d12496cd953dee03260fe7c6ba9e9471b2dd3","modified":1621862494311},{"_id":"themes/material/layout/layout.ejs","hash":"0a5926ca361e8ce1bb4aadab112ba3b486f21716","modified":1621862494311},{"_id":"themes/material/img/daily_pic.png","hash":"5e9a5f6a134889d0242e69061837f2032416d7ce","modified":1621862494274},{"_id":"themes/material/img/android-logo.png","hash":"1ecefb8a3fae9d35b188d52798f56ee6199b2d86","modified":1621862494273},{"_id":"themes/material/layout/_partial/Isolation-post-info.ejs","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1621862494304},{"_id":"source/img/CI/tomcat.png","hash":"6db687cbbf7dda4e8eed224e1939c5b126c4efe3","modified":1621862494271},{"_id":"source/img/CI/tomcat1.png","hash":"eed1c362b32a44af586bb40985c1328fb24f73dc","modified":1621862494271},{"_id":"themes/material/img/gallery/arrow.svg","hash":"68799fe01ecc7f5fb721287693b9b0b93f4c067a","modified":1621862494276},{"_id":"themes/material/img/gallery/close.svg","hash":"0739fa52652dd59cebecc861144b702e455adb0c","modified":1621862494276},{"_id":"themes/material/img/gallery/spinner.svg","hash":"ef69a35119feb82d8e9cf4a59656aa25051afebd","modified":1621862494276},{"_id":"themes/material/img/footer/footer_ico-facebook.png","hash":"66f959829d878794e66fd0e40c0d6bd843cc0cde","modified":1621862494274},{"_id":"themes/material/img/footer/footer_ico-bilibili.png","hash":"f922bc4606f4ecb3ec2bc1b2bfa092643ffa2e37","modified":1621862494274},{"_id":"themes/material/img/footer/footer_ico-telegram.png","hash":"1095c5279c498412ee314f4469768636e82148cb","modified":1621862494275},{"_id":"themes/material/img/footer/footer_ico-gplus.png","hash":"20971cbed2ebf58b9e3b087051f7fc56073da31d","modified":1621862494275},{"_id":"themes/material/img/footer/footer_ico-instagram.png","hash":"e8ec64e6f2639aec952e8e4d2944d5173f62e720","modified":1621862494275},{"_id":"themes/material/img/footer/footer_ico-github.png","hash":"4488aa8fc794beaba3e4c80d1f1b9d6c218b31ab","modified":1621862494275},{"_id":"themes/material/img/footer/footer_ico-linkedin.png","hash":"3d93bb435053b93243e3c259c448caf4ed00627e","modified":1621862494275},{"_id":"themes/material/img/footer/footer_ico-tumblr.png","hash":"447421c1dcced081fa5fb0355421b7bc71fe3f76","modified":1621862494275},{"_id":"themes/material/img/footer/footer_ico-weibo.png","hash":"8d46998b88f57a2d92effaa65e97ee36906396c2","modified":1621862494275},{"_id":"themes/material/img/footer/footer_ico-twitter.png","hash":"98b6529d3e08d5d086a4df85c20265c4517ec9a8","modified":1621862494275},{"_id":"themes/material/img/footer/footer_ico-zhihu.png","hash":"6b94cdb6e0a69e169baec6e22fe3a6e51b7ba4b5","modified":1621862494275},{"_id":"themes/material/layout/_partial/Isolation-post_entry.ejs","hash":"40d92980035615a7c1abb24d2dec8d7b3f4d5b08","modified":1621862494305},{"_id":"themes/material/layout/_partial/Paradox-post-info.ejs","hash":"b5d558738b27ba16fef80399cc56a50e26c49f26","modified":1621862494305},{"_id":"themes/material/layout/_partial/Paradox-post-thumbnail.ejs","hash":"d9bfa1145e97aa9c886e0d90797dea2ce4921c31","modified":1621862494305},{"_id":"themes/material/layout/_partial/Paradox-post_entry-thumbnail.ejs","hash":"3f9ff6f9d3d92e8143f328548b78ea77841e18fd","modified":1621862494305},{"_id":"themes/material/layout/_partial/Paradox-post_entry.ejs","hash":"9bf76252d1fe77bb2983c4f17f4c8ce02f0c5a67","modified":1621862494305},{"_id":"themes/material/layout/_partial/blog_info.ejs","hash":"c4aaeebf103dc5131ca2fe5039ae92e40fe86a29","modified":1621862494305},{"_id":"themes/material/layout/_partial/Paradox-search.ejs","hash":"18a6971b04feccd124a096b8c7cecf1fd4bb914e","modified":1621862494305},{"_id":"themes/material/layout/_partial/comment.ejs","hash":"d928dbab18f272ea641d9088352464cf8911e2e4","modified":1621862494306},{"_id":"themes/material/layout/_partial/footer-option.ejs","hash":"b97d733338b0c281bfc443c8011741f0aa70f559","modified":1621862494307},{"_id":"themes/material/layout/_partial/config_css.ejs","hash":"4d81f3a910e7f8f6d87839b57bfa85376fbb62f6","modified":1621862494306},{"_id":"themes/material/layout/_partial/daily_pic.ejs","hash":"22f377c0ba70d930a66dfcc775f216a560746996","modified":1621862494306},{"_id":"themes/material/layout/_partial/footer-left.ejs","hash":"86a6e8bdec676e8aec2ee67f35da4be2c0d5f0db","modified":1621862494306},{"_id":"themes/material/layout/_partial/footer_top.ejs","hash":"dfcb4d7fc0ee401613f7fa2ef22614e3e4ba3305","modified":1621862494307},{"_id":"themes/material/layout/_partial/footer.ejs","hash":"a794e79790594be252d6528631f378c063025d8d","modified":1621862494307},{"_id":"themes/material/layout/_partial/head.ejs","hash":"f4eae73fddca412df635b0f11c9096568ba04d57","modified":1621862494307},{"_id":"themes/material/layout/_partial/import_js.ejs","hash":"1d9e77369c2be92db5a2c0b20fa77d42f4e7cb0b","modified":1621862494307},{"_id":"themes/material/layout/_partial/isolate_info.ejs","hash":"89cf453c7b0efc4665f73e3670cca54b2381a0a2","modified":1621862494307},{"_id":"themes/material/layout/_partial/isolate-sns_list.ejs","hash":"fc5f03ebb847f85975676a9dfee8870e7c908008","modified":1621862494307},{"_id":"themes/material/layout/_partial/post-content.ejs","hash":"02374b20989c81031e29257d872624d5195ddcbd","modified":1621862494308},{"_id":"themes/material/layout/_partial/post-header.ejs","hash":"e5c1271b94d66597812cdf88057c8690bfe72d55","modified":1621862494308},{"_id":"themes/material/img/luobin1.png","hash":"8213960716a8ad6e752573f774fc65546662348e","modified":1621862494278},{"_id":"themes/material/layout/_partial/post-nav.ejs","hash":"7b291719414408a9ec0b9167a2c6c834f90905b3","modified":1621862494308},{"_id":"themes/material/layout/_partial/post-info-share.ejs","hash":"2f9d670b17e7763ae595593e9881284dc6c1bada","modified":1621862494308},{"_id":"themes/material/layout/_partial/sidebar-footer.ejs","hash":"6c3486b846473e0d58666f7a8720f5bf4a14e030","modified":1621862494308},{"_id":"themes/material/layout/_partial/sidebar-footer_image.ejs","hash":"ea7ff13f099ebd9a0caad26621f4a23b26b72309","modified":1621862494308},{"_id":"themes/material/layout/_partial/sidebar-header.ejs","hash":"d18344f05712f66e0385839e4d83d5a3a515c140","modified":1621862494308},{"_id":"themes/material/layout/_partial/toc_button.ejs","hash":"4e5b9db6c2d82cc52715b20ea5d2fe511e2f18bc","modified":1621862494309},{"_id":"themes/material/layout/_partial/sidebar.ejs","hash":"c5ce6136e82895cb80dab8a918a7cdf2fe820fea","modified":1621862494309},{"_id":"themes/material/layout/_partial/sidebar-navigation.ejs","hash":"eaedc9861342f9f4c85bf86aed7b9b9627887bac","modified":1621862494309},{"_id":"themes/material/layout/_widget/disqus_click.ejs","hash":"835b35467df66596272240df413d8ed4ca92d178","modified":1621862494309},{"_id":"themes/material/layout/_widget/duoshuo.ejs","hash":"ae09d002bf5d3517ccde7f580dde20e0d47f627f","modified":1621862494309},{"_id":"themes/material/layout/_widget/disqus.ejs","hash":"e892a764d9e5dd36253d4c43b3f1cda4fbf2d3c1","modified":1621862494309},{"_id":"themes/material/layout/_widget/leancloud-like.ejs","hash":"f0cd9956fde4437fecb01e322ff025ad307c240a","modified":1621862494309},{"_id":"themes/material/layout/_widget/mathjax.ejs","hash":"9a6cc0b1ed4d9b7cba3722e2daf8fb2e55d0d52e","modified":1621862494310},{"_id":"themes/material/layout/_widget/leancloud-views.ejs","hash":"630796a1377a3a0fc378baa377b05926f6e0b8f4","modified":1621862494310},{"_id":"themes/material/layout/_widget/leancloud-views_num.ejs","hash":"e27baba6a2de406463735d276606b15fb40f5eba","modified":1621862494310},{"_id":"themes/material/layout/_widget/nprogress.ejs","hash":"4c98bc89612bcfe4e910b1c99ea4bef61d1b1c4c","modified":1621862494310},{"_id":"themes/material/layout/_widget/page-gallery.ejs","hash":"ab2dc6dbbf4e467c86c862b6ffdfadc101d3fb2c","modified":1621862494310},{"_id":"themes/material/layout/_widget/page-links.ejs","hash":"75ce946ba9717ede360035853f5de873f00b57cb","modified":1621862494310},{"_id":"themes/material/layout/_widget/page-tagcloud.ejs","hash":"e184ca7f8519936903248b7797d281fad35b9521","modified":1621862494310},{"_id":"themes/material/layout/_widget/search-swiftype-js.ejs","hash":"c363e3c208eae18e7c440160790fafba110fa9c9","modified":1621862494311},{"_id":"themes/material/layout/_widget/search-local-js.ejs","hash":"475c507773be23c87e63e22d8474ead06a5ebd49","modified":1621862494311},{"_id":"themes/material/source/fonts/MaterialIcons-Regular.woff","hash":"c6c953c2ccb2ca9abb21db8dbf473b5a435f0082","modified":1621862494317},{"_id":"themes/material/source/fonts/MaterialIcons-Regular.woff2","hash":"09963592e8c953cc7e14e3fb0a5b05d5042e8435","modified":1621862494318},{"_id":"themes/material/source/css/duoshuo.css","hash":"32a02eaa01ff7b66fd9df307b0d33d52810096be","modified":1621862494312},{"_id":"themes/material/source/css/duoshuo.min.css","hash":"89a30544b8b01d061da51c40f2af702a7969de5e","modified":1621862494312},{"_id":"themes/material/source/css/ie-blocker.css","hash":"dddce7e6250a449291888ae7865697282a213b14","modified":1621862494312},{"_id":"themes/material/source/css/gallery.min.css","hash":"c5333ca835aae49239d809130a7b281af745729e","modified":1621862494312},{"_id":"themes/material/source/css/uc.css","hash":"7609828f93973d1a6d3ba4b38d94688a92a6a6c5","modified":1621862494314},{"_id":"themes/material/source/img/avatar.png","hash":"bf483b0d495dbbcfb308348a945818e1c1cc9696","modified":1621862494340},{"_id":"themes/material/source/img/avatarluffy.png","hash":"171aba4451fa8b5d1e17df86a378e61c0eab77c9","modified":1621862494340},{"_id":"themes/material/source/img/favicon.png","hash":"b1bcc84cedb2a618e8db93559ce7d58f9274085d","modified":1621862494341},{"_id":"themes/material/source/img/bg.png","hash":"a32f9717e19e821a4030ade551dc2917c889fcd8","modified":1621862494340},{"_id":"themes/material/source/img/logo.png","hash":"b1bcc84cedb2a618e8db93559ce7d58f9274085d","modified":1621862494343},{"_id":"themes/material/source/img/joba.png","hash":"f527e1dd3dd1bb30c871e39ea0267882666a5a1f","modified":1621862494343},{"_id":"themes/material/source/img/joba1.png","hash":"68b1e0b86eb09ea472b0243fbadc0a8698cbd177","modified":1621862494343},{"_id":"themes/material/source/img/luffy1.png","hash":"ee47a79b8bb922bcbf61b6a6ff18abe9988bdcf8","modified":1621862494343},{"_id":"themes/material/source/img/luobin.png","hash":"a43190333b9f90eb6ce6c77374b5b859d18292dd","modified":1621862494344},{"_id":"themes/material/source/img/upyun_logo.png","hash":"aee4e90c4e2e72ef7036668c52dabcd8d028ee2f","modified":1621862494367},{"_id":"themes/material/source/js/ie-blocker.en.js","hash":"96ca8e677a12048d099319ebdf01983ddc6ca80c","modified":1621862494369},{"_id":"themes/material/source/img/zoro.png","hash":"bf1c427d98c3f71d04f61ca508ce573f806a6187","modified":1621862494367},{"_id":"themes/material/source/img/sidebar_header.png","hash":"c47f4d39f421c0a950279d050ae82f9ae6dd19ff","modified":1621862494367},{"_id":"themes/material/source/js/ie-blocker.zhCN.js","hash":"0ed49b0ec1d1924b128fbd97fca2cf7af7856fdf","modified":1621862494369},{"_id":"themes/material/source/js/lazyload.min.js","hash":"5348fd7aa4dbefac9d21091c9fd5e263563b5540","modified":1621862494371},{"_id":"themes/material/source/js/queue.js","hash":"a978181ac4938bac0b868e95cf19c84949d8d363","modified":1621862494371},{"_id":"themes/material/source/js/ripple.js","hash":"2e30ec823a5922a4eb85490efa5591ea6dd78f50","modified":1621862494371},{"_id":"themes/material/source/js/nprogress.js","hash":"a3058d4b6afb5d7a14e5afcbb88f778de35864f0","modified":1621862494371},{"_id":"themes/material/source/js/smoothscroll.js","hash":"df56a1c84191a62750ae820943377b6775fca0e2","modified":1621862494371},{"_id":"themes/material/img/random/material-13.png","hash":"1a8378db3121b583485e2b939cb1aa0e0b14b0c8","modified":1621862494284},{"_id":"themes/material/img/random/material-15.png","hash":"36b9937cf3810e4970902b78797ad29b0831f065","modified":1621862494286},{"_id":"themes/material/img/random/material-16.png","hash":"ade7f75200d3fb38326e3cf1e9f1a812fb12a43b","modified":1621862494286},{"_id":"themes/material/img/random/material-4.png","hash":"171d9290b89a8e102d33f5a5c3f2d003cc20fe9f","modified":1621862494293},{"_id":"themes/material/img/random/material-6.png","hash":"29dd92b7c110bb6dfdfc2923c33f5d0895518001","modified":1621862494296},{"_id":"themes/material/source/fonts/MaterialIcons-Regular.ttf","hash":"fc05de31234e0090f7ddc28ce1b23af4026cb1da","modified":1621862494317},{"_id":"themes/material/source/fonts/fontawesome-webfont.eot","hash":"986eed8dca049714e43eeebcb3932741a4bec76d","modified":1621862494337},{"_id":"themes/material/source/fonts/fontawesome-webfont.woff","hash":"4a313eb93b959cc4154c684b915b0a31ddb68d84","modified":1621862494339},{"_id":"themes/material/source/fonts/fontawesome-webfont.woff2","hash":"638c652d623280a58144f93e7b552c66d1667a11","modified":1621862494339},{"_id":"themes/material/source/css/style.css","hash":"02ad5733c3c515ad29b41f45b10a8c67909254a6","modified":1621862494314},{"_id":"themes/material/source/css/material.min.css","hash":"f3c8e6a9d94e6cad30c6628e1d732e6ee00d5fce","modified":1621862494313},{"_id":"themes/material/source/css/style.min.css","hash":"88b786f8ba6cd07253bd2afa30c7f0ea4b2331ac","modified":1621862494314},{"_id":"themes/material/source/img/android-logo.png","hash":"1ecefb8a3fae9d35b188d52798f56ee6199b2d86","modified":1621862494339},{"_id":"themes/material/source/img/daily_pic.png","hash":"5e9a5f6a134889d0242e69061837f2032416d7ce","modified":1621862494341},{"_id":"themes/material/source/js/jquery.min.js","hash":"00073d6597d2760b81387274a9ec56b9d5cb1552","modified":1621862494369},{"_id":"themes/material/source/js/js.min.js","hash":"a06e88ba0f594bc67be1618f9d0c203369d53700","modified":1621862494370},{"_id":"themes/material/source/js/js.js","hash":"4634558bdb27ca5a2f728d6ff57590fbd91af6f1","modified":1621862494370},{"_id":"themes/material/img/random/material-12.png","hash":"ba0c8506af62f984da564e6e390f592475e51f2d","modified":1621862494283},{"_id":"themes/material/img/random/material-17.png","hash":"9c463f96d4dadae4e67932c2d7ed1e353c4ecca8","modified":1621862494286},{"_id":"themes/material/img/random/material-3.png","hash":"a7f86a309712b9bbb01a4b7b39b1ee429df9086a","modified":1621862494292},{"_id":"themes/material/img/random/material-9.png","hash":"bc4f1b42fd2d09a80ab5fef8c6066b5148db0749","modified":1621862494302},{"_id":"themes/material/source/fonts/MaterialIcons-Regular.eot","hash":"26fb8cecb5512223277b4d290a24492a0f09ede1","modified":1621862494316},{"_id":"themes/material/source/fonts/fontawesome-webfont.ttf","hash":"6484f1af6b485d5096b71b344e67f4164c33dd1f","modified":1621862494338},{"_id":"themes/material/source/css/material.css","hash":"19818d637ecb3bae73d16ee90444c42fe4458b54","modified":1621862494313},{"_id":"themes/material/source/img/footer/footer_ico-github.png","hash":"4488aa8fc794beaba3e4c80d1f1b9d6c218b31ab","modified":1621862494341},{"_id":"themes/material/source/img/footer/footer_ico-bilibili.png","hash":"f922bc4606f4ecb3ec2bc1b2bfa092643ffa2e37","modified":1621862494341},{"_id":"themes/material/source/img/footer/footer_ico-gplus.png","hash":"20971cbed2ebf58b9e3b087051f7fc56073da31d","modified":1621862494341},{"_id":"themes/material/source/img/footer/footer_ico-facebook.png","hash":"66f959829d878794e66fd0e40c0d6bd843cc0cde","modified":1621862494341},{"_id":"themes/material/source/img/footer/footer_ico-instagram.png","hash":"e8ec64e6f2639aec952e8e4d2944d5173f62e720","modified":1621862494342},{"_id":"themes/material/source/img/footer/footer_ico-linkedin.png","hash":"3d93bb435053b93243e3c259c448caf4ed00627e","modified":1621862494342},{"_id":"themes/material/source/img/footer/footer_ico-telegram.png","hash":"1095c5279c498412ee314f4469768636e82148cb","modified":1621862494342},{"_id":"themes/material/source/img/footer/footer_ico-twitter.png","hash":"98b6529d3e08d5d086a4df85c20265c4517ec9a8","modified":1621862494342},{"_id":"themes/material/source/img/footer/footer_ico-weibo.png","hash":"8d46998b88f57a2d92effaa65e97ee36906396c2","modified":1621862494342},{"_id":"themes/material/source/img/footer/footer_ico-tumblr.png","hash":"447421c1dcced081fa5fb0355421b7bc71fe3f76","modified":1621862494342},{"_id":"themes/material/source/img/footer/footer_ico-zhihu.png","hash":"6b94cdb6e0a69e169baec6e22fe3a6e51b7ba4b5","modified":1621862494342},{"_id":"themes/material/source/img/gallery/close.svg","hash":"0739fa52652dd59cebecc861144b702e455adb0c","modified":1621862494342},{"_id":"themes/material/source/img/gallery/arrow.svg","hash":"68799fe01ecc7f5fb721287693b9b0b93f4c067a","modified":1621862494342},{"_id":"themes/material/source/img/gallery/spinner.svg","hash":"ef69a35119feb82d8e9cf4a59656aa25051afebd","modified":1621862494343},{"_id":"themes/material/source/js/gallery/jquery.poptrox.min.js","hash":"ade2e2710565eebca01b68b9bfae4a4848d779aa","modified":1621862494368},{"_id":"themes/material/source/img/luobin1.png","hash":"8213960716a8ad6e752573f774fc65546662348e","modified":1621862494344},{"_id":"themes/material/source/js/gallery/jquery.scrollstop.min.js","hash":"b3f8d996b7eb60fd9a0d6c216815ca970cb83863","modified":1621862494368},{"_id":"themes/material/source/js/gallery/main.min.js","hash":"83e3124ddb551ce1efe3d71ccdbb8deea0f99983","modified":1621862494368},{"_id":"themes/material/source/js/gallery/util.min.js","hash":"21f9de56727e235a83d514d08a65c7ef1b09c9e9","modified":1621862494368},{"_id":"themes/material/source/js/gallery/skel.min.js","hash":"a337cc51a3fb9953d306b3879e2e7676dd27ce53","modified":1621862494368},{"_id":"themes/material/img/random/material-11.png","hash":"637d4513d1e7beeb1e5179fa404b4b6ea61ca3dd","modified":1621862494282},{"_id":"themes/material/img/random/material-10.png","hash":"021dca8d2477dae8f456a0cdc2725502d3b45785","modified":1621862494281},{"_id":"themes/material/img/random/material-19.png","hash":"f0b5383ba5c7e91f711daaa6b3a520556b7ca14d","modified":1621862494289},{"_id":"themes/material/img/random/material-8.png","hash":"cb700661e312a5527aaf229517705adb1c1cead2","modified":1621862494301},{"_id":"themes/material/source/fonts/FontAwesome.otf","hash":"42c179eef588854b5ec151bcf6a3f58aa8b79b11","modified":1621862494315},{"_id":"themes/material/source/img/random/material-13.png","hash":"1a8378db3121b583485e2b939cb1aa0e0b14b0c8","modified":1621862494351},{"_id":"themes/material/source/img/random/material-15.png","hash":"36b9937cf3810e4970902b78797ad29b0831f065","modified":1621862494353},{"_id":"themes/material/source/img/random/material-16.png","hash":"ade7f75200d3fb38326e3cf1e9f1a812fb12a43b","modified":1621862494353},{"_id":"themes/material/source/img/random/material-17.png","hash":"9c463f96d4dadae4e67932c2d7ed1e353c4ecca8","modified":1621862494354},{"_id":"themes/material/source/img/random/material-6.png","hash":"29dd92b7c110bb6dfdfc2923c33f5d0895518001","modified":1621862494362},{"_id":"themes/material/source/img/random/material-12.png","hash":"ba0c8506af62f984da564e6e390f592475e51f2d","modified":1621862494350},{"_id":"themes/material/source/img/random/material-4.png","hash":"171d9290b89a8e102d33f5a5c3f2d003cc20fe9f","modified":1621862494359},{"_id":"themes/material/source/img/random/material-3.png","hash":"a7f86a309712b9bbb01a4b7b39b1ee429df9086a","modified":1621862494358},{"_id":"themes/material/source/img/random/material-9.png","hash":"bc4f1b42fd2d09a80ab5fef8c6066b5148db0749","modified":1621862494367},{"_id":"themes/material/img/random/material-2.png","hash":"c5fc2ec66660f48be0fb092a872d4058e9d9e68f","modified":1621862494291},{"_id":"themes/material/source/fonts/fontawesome-webfont.svg","hash":"b06b5c8f67fd632cdc62a33b62ae4f74194131b3","modified":1621862494338},{"_id":"themes/material/source/img/random/material-10.png","hash":"021dca8d2477dae8f456a0cdc2725502d3b45785","modified":1621862494347},{"_id":"themes/material/source/img/random/material-19.png","hash":"f0b5383ba5c7e91f711daaa6b3a520556b7ca14d","modified":1621862494355},{"_id":"themes/material/source/img/random/material-8.png","hash":"cb700661e312a5527aaf229517705adb1c1cead2","modified":1621862494366},{"_id":"themes/material/img/random/material-1.png","hash":"af4b0ad72ce30f3fd7f7435cd3267b9187335ffd","modified":1621862494279},{"_id":"themes/material/source/img/random/material-11.png","hash":"637d4513d1e7beeb1e5179fa404b4b6ea61ca3dd","modified":1621862494349},{"_id":"themes/material/source/img/random/material-2.png","hash":"c5fc2ec66660f48be0fb092a872d4058e9d9e68f","modified":1621862494357},{"_id":"themes/material/img/random/material-7.png","hash":"e4aa6d4e1b52f1c097f61b5205d5b71a412e1d80","modified":1621862494299},{"_id":"themes/material/source/fonts/Roboto-Medium.ttf","hash":"3965419aab480c184f66bc5e39c1719a373a4ef6","modified":1621862494331},{"_id":"themes/material/source/fonts/Roboto-Regular.ttf","hash":"06691e103d4d3ce1f1108d9b7d21254b714a41f8","modified":1621862494334},{"_id":"themes/material/source/fonts/Roboto-Bold.ttf","hash":"d1864343b543978bd491d40c80010cea50c1b7bf","modified":1621862494324},{"_id":"themes/material/source/fonts/Roboto-Thin.ttf","hash":"ed5101c3a800f35e925603a406e0c2dc5278b96c","modified":1621862494337},{"_id":"themes/material/img/random/material-5.png","hash":"e26c197b3a765bbdcc966e4fb368c8808e9d655d","modified":1621862494295},{"_id":"themes/material/source/fonts/Roboto-Black.ttf","hash":"0244e6497a51fb8a38ca7e6fe297b066e2e09af5","modified":1621862494321},{"_id":"themes/material/source/fonts/Roboto-Light.ttf","hash":"b9ea2eaf26ff8fdcb5aee3e0c2c7a6084ebb6aac","modified":1621862494327},{"_id":"themes/material/source/img/random/material-1.png","hash":"af4b0ad72ce30f3fd7f7435cd3267b9187335ffd","modified":1621862494346},{"_id":"themes/material/img/random/material-14.png","hash":"f6bd9ceca7deb32c45b02a5d89014c7ee4748833","modified":1621862494285},{"_id":"themes/material/source/img/random/material-7.png","hash":"e4aa6d4e1b52f1c097f61b5205d5b71a412e1d80","modified":1621862494364},{"_id":"themes/material/img/random/material-18.png","hash":"1d5bacea5d57cc3e652a7c697bcb4fbcb11e20dc","modified":1621862494287},{"_id":"themes/material/source/img/random/material-5.png","hash":"e26c197b3a765bbdcc966e4fb368c8808e9d655d","modified":1621862494361},{"_id":"themes/material/source/img/random/material-18.png","hash":"1d5bacea5d57cc3e652a7c697bcb4fbcb11e20dc","modified":1621862494354},{"_id":"themes/material/source/img/random/material-14.png","hash":"f6bd9ceca7deb32c45b02a5d89014c7ee4748833","modified":1621862494351},{"_id":"public/tags/index.html","hash":"276ff9f766f3c05e67bf2651041ad282ea4382e8","modified":1622025316953},{"_id":"public/2017/06/19/译-Building Instrumented Unit Test/index.html","hash":"581edb386d834d3f6428167817b7a86f4a943a8f","modified":1622025316953},{"_id":"public/2017/06/19/译-Building Local Unit Test/index.html","hash":"2bb1908132f9680227420868ca8df623b987041f","modified":1622025316954},{"_id":"public/2017/04/06/git/index.html","hash":"23757bcb473783b99245ca426701ab1e2bc14d0a","modified":1622025316954},{"_id":"public/2017/04/06/Jenkin + Git + Gradle 为 Android 项目搭建 CI 环境/index.html","hash":"9cb197c38122ab8f2c435200ac85c357e6d60a68","modified":1622025316954},{"_id":"public/2017/03/26/博客搭建-hexo-Github-多机同步/index.html","hash":"ecb97d89c6e5de55966391df5322b7c0db4c7723","modified":1622025316954},{"_id":"public/2016/04/23/Android 登录界面随软键盘弹出滑动/index.html","hash":"78f846e4aca2267bf5b3e81f598f0ae665846405","modified":1622025316954},{"_id":"public/2016/04/23/TextView的drawable属性/index.html","hash":"2ac00542db497f9ed1a4b280e6af2e8cafd8de80","modified":1622025316954},{"_id":"public/index.html","hash":"52848483a81102f7e195ddf7c2e4b6494d5f0f95","modified":1622025316955},{"_id":"public/archives/index.html","hash":"8fe877f31cbab673bbed61a49ed09aeec52f8f0a","modified":1622025316955},{"_id":"public/archives/2016/index.html","hash":"39bd6c9ae86abf8760e4c26442f8838f2f824156","modified":1622025316955},{"_id":"public/archives/2016/04/index.html","hash":"1af68dbb2cbbaf2bc6b2589d3cb0454b3f888356","modified":1622025316955},{"_id":"public/archives/2017/04/index.html","hash":"1e421bdab2378fda567edb14cdd057d0ccd0cc11","modified":1622025316955},{"_id":"public/archives/2017/index.html","hash":"ccd8310eba297efc288b363565f16e64957d2de4","modified":1622025316955},{"_id":"public/archives/2017/03/index.html","hash":"50041a60455bfea90ecde6b090f1568a64cdcde8","modified":1622025316955},{"_id":"public/archives/2017/06/index.html","hash":"ff31debee230b197d1563968004ed0658139018c","modified":1622025316955},{"_id":"public/tags/android布局技巧-TextView/index.html","hash":"c3ece1d33c8ef12a9ddde392d60928ea07d505a5","modified":1622025316955},{"_id":"public/tags/版本控制/index.html","hash":"2e9b009a9ecb5ec1b65754ffb4cd81eefe45e7e1","modified":1622025316955},{"_id":"public/tags/项目管理-自动化构建/index.html","hash":"3d325572d050945a1996010a0f8a1c885e998b1b","modified":1622025316955},{"_id":"public/tags/android布局-软键盘-Android/index.html","hash":"8cc9099b74caffce332252de127c5b9e75cf2808","modified":1622025316955},{"_id":"public/tags/hexo/index.html","hash":"31b6172dddb78c5834596dcf6e8f87c62f7ecb56","modified":1622025316955},{"_id":"public/tags/单元测试-Android/index.html","hash":"535db048ba9e6451b1e7a6491a1b71eb9527309b","modified":1622025316955},{"_id":"public/categories/android/index.html","hash":"39e48440fb08ef4651b7a4e3fcbac20fa9822fce","modified":1622025316954},{"_id":"public/categories/Android/index.html","hash":"35c4058ba20341a268abf68849629eedd8c1dbf0","modified":1622025200649},{"_id":"public/categories/翻译/index.html","hash":"3c84329de152f9bfd0a99a618724661603f68e89","modified":1622025316954},{"_id":"public/img/CI/tomcat.png","hash":"6db687cbbf7dda4e8eed224e1939c5b126c4efe3","modified":1622025200665},{"_id":"public/img/CI/tomcat1.png","hash":"eed1c362b32a44af586bb40985c1328fb24f73dc","modified":1622025200665},{"_id":"public/fonts/MaterialIcons-Regular.woff2","hash":"09963592e8c953cc7e14e3fb0a5b05d5042e8435","modified":1622025200665},{"_id":"public/img/avatar.png","hash":"bf483b0d495dbbcfb308348a945818e1c1cc9696","modified":1622025200666},{"_id":"public/img/favicon.png","hash":"b1bcc84cedb2a618e8db93559ce7d58f9274085d","modified":1622025200666},{"_id":"public/img/avatarluffy.png","hash":"171aba4451fa8b5d1e17df86a378e61c0eab77c9","modified":1622025200666},{"_id":"public/img/bg.png","hash":"a32f9717e19e821a4030ade551dc2917c889fcd8","modified":1622025200666},{"_id":"public/img/logo.png","hash":"b1bcc84cedb2a618e8db93559ce7d58f9274085d","modified":1622025200666},{"_id":"public/img/joba.png","hash":"f527e1dd3dd1bb30c871e39ea0267882666a5a1f","modified":1622025200666},{"_id":"public/img/joba1.png","hash":"68b1e0b86eb09ea472b0243fbadc0a8698cbd177","modified":1622025200666},{"_id":"public/img/luffy1.png","hash":"ee47a79b8bb922bcbf61b6a6ff18abe9988bdcf8","modified":1622025200666},{"_id":"public/img/luobin.png","hash":"a43190333b9f90eb6ce6c77374b5b859d18292dd","modified":1622025200666},{"_id":"public/img/upyun_logo.png","hash":"aee4e90c4e2e72ef7036668c52dabcd8d028ee2f","modified":1622025200666},{"_id":"public/img/zoro.png","hash":"bf1c427d98c3f71d04f61ca508ce573f806a6187","modified":1622025200666},{"_id":"public/img/sidebar_header.png","hash":"c47f4d39f421c0a950279d050ae82f9ae6dd19ff","modified":1622025200666},{"_id":"public/img/footer/footer_ico-github.png","hash":"4488aa8fc794beaba3e4c80d1f1b9d6c218b31ab","modified":1622025200666},{"_id":"public/img/footer/footer_ico-bilibili.png","hash":"f922bc4606f4ecb3ec2bc1b2bfa092643ffa2e37","modified":1622025200666},{"_id":"public/img/footer/footer_ico-gplus.png","hash":"20971cbed2ebf58b9e3b087051f7fc56073da31d","modified":1622025200667},{"_id":"public/img/footer/footer_ico-facebook.png","hash":"66f959829d878794e66fd0e40c0d6bd843cc0cde","modified":1622025200667},{"_id":"public/img/footer/footer_ico-linkedin.png","hash":"3d93bb435053b93243e3c259c448caf4ed00627e","modified":1622025200667},{"_id":"public/img/footer/footer_ico-instagram.png","hash":"e8ec64e6f2639aec952e8e4d2944d5173f62e720","modified":1622025200667},{"_id":"public/img/footer/footer_ico-telegram.png","hash":"1095c5279c498412ee314f4469768636e82148cb","modified":1622025200667},{"_id":"public/img/footer/footer_ico-twitter.png","hash":"98b6529d3e08d5d086a4df85c20265c4517ec9a8","modified":1622025200667},{"_id":"public/img/footer/footer_ico-tumblr.png","hash":"447421c1dcced081fa5fb0355421b7bc71fe3f76","modified":1622025200667},{"_id":"public/img/footer/footer_ico-weibo.png","hash":"8d46998b88f57a2d92effaa65e97ee36906396c2","modified":1622025200667},{"_id":"public/img/footer/footer_ico-zhihu.png","hash":"6b94cdb6e0a69e169baec6e22fe3a6e51b7ba4b5","modified":1622025200667},{"_id":"public/img/gallery/close.svg","hash":"0739fa52652dd59cebecc861144b702e455adb0c","modified":1622025200667},{"_id":"public/img/gallery/arrow.svg","hash":"68799fe01ecc7f5fb721287693b9b0b93f4c067a","modified":1622025200667},{"_id":"public/img/gallery/spinner.svg","hash":"ef69a35119feb82d8e9cf4a59656aa25051afebd","modified":1622025200667},{"_id":"public/fonts/MaterialIcons-Regular.woff","hash":"c6c953c2ccb2ca9abb21db8dbf473b5a435f0082","modified":1622025200678},{"_id":"public/fonts/MaterialIcons-Regular.ttf","hash":"fc05de31234e0090f7ddc28ce1b23af4026cb1da","modified":1622025200678},{"_id":"public/fonts/fontawesome-webfont.eot","hash":"986eed8dca049714e43eeebcb3932741a4bec76d","modified":1622025200678},{"_id":"public/fonts/fontawesome-webfont.woff","hash":"4a313eb93b959cc4154c684b915b0a31ddb68d84","modified":1622025200678},{"_id":"public/fonts/fontawesome-webfont.woff2","hash":"638c652d623280a58144f93e7b552c66d1667a11","modified":1622025200678},{"_id":"public/img/android-logo.png","hash":"1ecefb8a3fae9d35b188d52798f56ee6199b2d86","modified":1622025200678},{"_id":"public/img/daily_pic.png","hash":"5e9a5f6a134889d0242e69061837f2032416d7ce","modified":1622025200678},{"_id":"public/img/random/material-13.png","hash":"1a8378db3121b583485e2b939cb1aa0e0b14b0c8","modified":1622025200678},{"_id":"public/fonts/FontAwesome.otf","hash":"42c179eef588854b5ec151bcf6a3f58aa8b79b11","modified":1622025200678},{"_id":"public/img/random/material-15.png","hash":"36b9937cf3810e4970902b78797ad29b0831f065","modified":1622025200678},{"_id":"public/img/random/material-16.png","hash":"ade7f75200d3fb38326e3cf1e9f1a812fb12a43b","modified":1622025200678},{"_id":"public/img/random/material-17.png","hash":"9c463f96d4dadae4e67932c2d7ed1e353c4ecca8","modified":1622025200679},{"_id":"public/img/random/material-6.png","hash":"29dd92b7c110bb6dfdfc2923c33f5d0895518001","modified":1622025200679},{"_id":"public/img/random/material-4.png","hash":"171d9290b89a8e102d33f5a5c3f2d003cc20fe9f","modified":1622025200679},{"_id":"public/css/duoshuo.css","hash":"32a02eaa01ff7b66fd9df307b0d33d52810096be","modified":1622025200684},{"_id":"public/css/ie-blocker.css","hash":"dddce7e6250a449291888ae7865697282a213b14","modified":1622025200684},{"_id":"public/css/uc.css","hash":"7609828f93973d1a6d3ba4b38d94688a92a6a6c5","modified":1622025200684},{"_id":"public/css/duoshuo.min.css","hash":"89a30544b8b01d061da51c40f2af702a7969de5e","modified":1622025200685},{"_id":"public/js/ie-blocker.en.js","hash":"96ca8e677a12048d099319ebdf01983ddc6ca80c","modified":1622025200685},{"_id":"public/js/ie-blocker.zhCN.js","hash":"0ed49b0ec1d1924b128fbd97fca2cf7af7856fdf","modified":1622025200685},{"_id":"public/js/nprogress.js","hash":"a3058d4b6afb5d7a14e5afcbb88f778de35864f0","modified":1622025200685},{"_id":"public/js/queue.js","hash":"a978181ac4938bac0b868e95cf19c84949d8d363","modified":1622025200685},{"_id":"public/js/ripple.js","hash":"2e30ec823a5922a4eb85490efa5591ea6dd78f50","modified":1622025200685},{"_id":"public/js/lazyload.min.js","hash":"5348fd7aa4dbefac9d21091c9fd5e263563b5540","modified":1622025200685},{"_id":"public/js/smoothscroll.js","hash":"df56a1c84191a62750ae820943377b6775fca0e2","modified":1622025200685},{"_id":"public/js/gallery/jquery.poptrox.min.js","hash":"ade2e2710565eebca01b68b9bfae4a4848d779aa","modified":1622025200685},{"_id":"public/js/gallery/main.min.js","hash":"83e3124ddb551ce1efe3d71ccdbb8deea0f99983","modified":1622025200685},{"_id":"public/js/gallery/jquery.scrollstop.min.js","hash":"b3f8d996b7eb60fd9a0d6c216815ca970cb83863","modified":1622025200686},{"_id":"public/js/gallery/skel.min.js","hash":"a337cc51a3fb9953d306b3879e2e7676dd27ce53","modified":1622025200686},{"_id":"public/js/gallery/util.min.js","hash":"21f9de56727e235a83d514d08a65c7ef1b09c9e9","modified":1622025200686},{"_id":"public/css/gallery.min.css","hash":"c5333ca835aae49239d809130a7b281af745729e","modified":1622025200686},{"_id":"public/css/style.css","hash":"02ad5733c3c515ad29b41f45b10a8c67909254a6","modified":1622025200686},{"_id":"public/css/style.min.css","hash":"88b786f8ba6cd07253bd2afa30c7f0ea4b2331ac","modified":1622025200686},{"_id":"public/css/material.min.css","hash":"f3c8e6a9d94e6cad30c6628e1d732e6ee00d5fce","modified":1622025200686},{"_id":"public/js/jquery.min.js","hash":"00073d6597d2760b81387274a9ec56b9d5cb1552","modified":1622025200686},{"_id":"public/js/js.min.js","hash":"a06e88ba0f594bc67be1618f9d0c203369d53700","modified":1622025200686},{"_id":"public/js/js.js","hash":"4634558bdb27ca5a2f728d6ff57590fbd91af6f1","modified":1622025200686},{"_id":"public/css/material.css","hash":"19818d637ecb3bae73d16ee90444c42fe4458b54","modified":1622025200686},{"_id":"public/fonts/MaterialIcons-Regular.eot","hash":"26fb8cecb5512223277b4d290a24492a0f09ede1","modified":1622025200686},{"_id":"public/fonts/fontawesome-webfont.ttf","hash":"6484f1af6b485d5096b71b344e67f4164c33dd1f","modified":1622025200686},{"_id":"public/img/luobin1.png","hash":"8213960716a8ad6e752573f774fc65546662348e","modified":1622025200686},{"_id":"public/img/random/material-12.png","hash":"ba0c8506af62f984da564e6e390f592475e51f2d","modified":1622025200687},{"_id":"public/img/random/material-3.png","hash":"a7f86a309712b9bbb01a4b7b39b1ee429df9086a","modified":1622025200687},{"_id":"public/img/random/material-9.png","hash":"bc4f1b42fd2d09a80ab5fef8c6066b5148db0749","modified":1622025200687},{"_id":"public/img/random/material-10.png","hash":"021dca8d2477dae8f456a0cdc2725502d3b45785","modified":1622025200687},{"_id":"public/img/random/material-11.png","hash":"637d4513d1e7beeb1e5179fa404b4b6ea61ca3dd","modified":1622025200694},{"_id":"public/img/random/material-19.png","hash":"f0b5383ba5c7e91f711daaa6b3a520556b7ca14d","modified":1622025200699},{"_id":"public/img/random/material-8.png","hash":"cb700661e312a5527aaf229517705adb1c1cead2","modified":1622025200702},{"_id":"public/img/random/material-2.png","hash":"c5fc2ec66660f48be0fb092a872d4058e9d9e68f","modified":1622025200702},{"_id":"public/img/random/material-1.png","hash":"af4b0ad72ce30f3fd7f7435cd3267b9187335ffd","modified":1622025200702},{"_id":"public/fonts/fontawesome-webfont.svg","hash":"b06b5c8f67fd632cdc62a33b62ae4f74194131b3","modified":1622025200706},{"_id":"public/fonts/Roboto-Regular.ttf","hash":"06691e103d4d3ce1f1108d9b7d21254b714a41f8","modified":1622025200708},{"_id":"public/fonts/Roboto-Bold.ttf","hash":"d1864343b543978bd491d40c80010cea50c1b7bf","modified":1622025200708},{"_id":"public/fonts/Roboto-Light.ttf","hash":"b9ea2eaf26ff8fdcb5aee3e0c2c7a6084ebb6aac","modified":1622025200708},{"_id":"public/fonts/Roboto-Thin.ttf","hash":"ed5101c3a800f35e925603a406e0c2dc5278b96c","modified":1622025200710},{"_id":"public/fonts/Roboto-Black.ttf","hash":"0244e6497a51fb8a38ca7e6fe297b066e2e09af5","modified":1622025200710},{"_id":"public/img/random/material-7.png","hash":"e4aa6d4e1b52f1c097f61b5205d5b71a412e1d80","modified":1622025200710},{"_id":"public/img/random/material-5.png","hash":"e26c197b3a765bbdcc966e4fb368c8808e9d655d","modified":1622025200711},{"_id":"public/img/random/material-18.png","hash":"1d5bacea5d57cc3e652a7c697bcb4fbcb11e20dc","modified":1622025200711},{"_id":"public/img/random/material-14.png","hash":"f6bd9ceca7deb32c45b02a5d89014c7ee4748833","modified":1622025200711},{"_id":"public/fonts/Roboto-Medium.ttf","hash":"3965419aab480c184f66bc5e39c1719a373a4ef6","modified":1622025200711},{"_id":"public/2016/04/01/training-Graphics-Animation-Bitmaps-1/index.html","hash":"e92cb353c9997abdea34fe5570ae22861e06526c","modified":1622025316954},{"_id":"public/categories/持续集成/index.html","hash":"ca38d857667e3c61418e9b70dd1ac528c49585a3","modified":1622025316956},{"_id":"public/tags/android/index.html","hash":"e08ef2e50637f2069b2dc3c306b9f3f27e4baf06","modified":1622025316956}],"Category":[{"name":"android","_id":"ckp5bxa9j0008ya3o85e9k05z"},{"name":"Android","_id":"ckp5bxa9o000aya3ozcnvx78h"},{"name":"翻译","_id":"ckp5bxa9q000eya3omedin6ob"},{"name":"持续集成","_id":"ckp5bz8vq0001z83oopuw1bd7"}],"Data":[],"Page":[{"title":"tags","date":"2021-05-26T10:01:55.000Z","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2021-05-26 18:01:55\n---\n","updated":"2021-05-26T10:01:55.538Z","path":"tags/index.html","comments":1,"layout":"page","_id":"ckp5bxa8u0000ya3oqag7dkgi","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"TextView的drawable属性","date":"2016-04-23T00:52:43.000Z","_content":"# what\n实现Icon+文字在一个视觉元素的需求;\n### drawable属性\n* android:drawableLeft 图片在文字的左侧  \n* android:drawableTop 图片在文字的上方  \n* android:drawableRight 图片在文字的右侧  \n* android:drawableBottom 图片在文字的下方  \n* android:drawableStart 图片在文字的开始处 (API14才有,17生效)  \n* android:drawableBottom  图片在文字的结尾 (API14才有,17生效)  \n* android:drawablePadding 设置文字与图片之间的距离；  \n\n\n# how\n\t\t<TextView\n\t  \t \t  android:id=\"@+id/plus_tv\"\n\t\t\t\t android:layout_width=\"400dp\"\n\t        android:layout_height=\"wrap_content\"\n\t   \t\t android:text=\"加分\"\n\t    \t android:textColor=\"@android:color/holo_blue_dark\"  \n\t    \t android:textSize=\"36sp\"\n\t    \t android:textStyle=\"bold\"\n\t    \t android:typeface=\"serif\"  \n\t   \t\t style=\"?buttonBarButtonStyle\"\n\t\t\t   android:gravity=\"center_horizontal\"\n\t    \t android:drawableBottom=\"@drawable/ic_sentiment_dissatisfied_black_48dp\"\n\t    \t android:drawablePadding=\"20dp\"\n\t    \t android:drawableTint=\"@color/colorAccent\"/>  \n\n\n\n# question\n\n### 注意的问题\n* gravity属性只对文字起作用  \n* drawable在其方向上居中显示；\n* 当TextView的宽高属性为wrap_content时，宽高取决于文字和图片的较宽或较高者；\n\n### 局限性\n* 当drawable的宽高不确定时；例如，drawable为shape时，shape的宽高取决于控件本身的高度；所以shape无法显示；  \n* 当需要对drawable进行单独控制时；\n\n参考资料: [使用TextView的drawable属性](http://toughcoder.net/blog/2015/05/20/android-layout-trick-drawable-of-textview/)","source":"_posts/TextView的drawable属性.md","raw":"---\ntitle: TextView的drawable属性\ndate: 2016-04-23 08:52:43\ntags: android布局技巧 TextView\ncategories: android\n---\n# what\n实现Icon+文字在一个视觉元素的需求;\n### drawable属性\n* android:drawableLeft 图片在文字的左侧  \n* android:drawableTop 图片在文字的上方  \n* android:drawableRight 图片在文字的右侧  \n* android:drawableBottom 图片在文字的下方  \n* android:drawableStart 图片在文字的开始处 (API14才有,17生效)  \n* android:drawableBottom  图片在文字的结尾 (API14才有,17生效)  \n* android:drawablePadding 设置文字与图片之间的距离；  \n\n\n# how\n\t\t<TextView\n\t  \t \t  android:id=\"@+id/plus_tv\"\n\t\t\t\t android:layout_width=\"400dp\"\n\t        android:layout_height=\"wrap_content\"\n\t   \t\t android:text=\"加分\"\n\t    \t android:textColor=\"@android:color/holo_blue_dark\"  \n\t    \t android:textSize=\"36sp\"\n\t    \t android:textStyle=\"bold\"\n\t    \t android:typeface=\"serif\"  \n\t   \t\t style=\"?buttonBarButtonStyle\"\n\t\t\t   android:gravity=\"center_horizontal\"\n\t    \t android:drawableBottom=\"@drawable/ic_sentiment_dissatisfied_black_48dp\"\n\t    \t android:drawablePadding=\"20dp\"\n\t    \t android:drawableTint=\"@color/colorAccent\"/>  \n\n\n\n# question\n\n### 注意的问题\n* gravity属性只对文字起作用  \n* drawable在其方向上居中显示；\n* 当TextView的宽高属性为wrap_content时，宽高取决于文字和图片的较宽或较高者；\n\n### 局限性\n* 当drawable的宽高不确定时；例如，drawable为shape时，shape的宽高取决于控件本身的高度；所以shape无法显示；  \n* 当需要对drawable进行单独控制时；\n\n参考资料: [使用TextView的drawable属性](http://toughcoder.net/blog/2015/05/20/android-layout-trick-drawable-of-textview/)","slug":"TextView的drawable属性","published":1,"updated":"2021-05-26T10:07:53.775Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckp5bxa8v0001ya3owzpfszi1","content":"<h1 id=\"what\"><a href=\"#what\" class=\"headerlink\" title=\"what\"></a>what</h1><p>实现Icon+文字在一个视觉元素的需求;</p>\n<h3 id=\"drawable属性\"><a href=\"#drawable属性\" class=\"headerlink\" title=\"drawable属性\"></a>drawable属性</h3><ul>\n<li>android:drawableLeft 图片在文字的左侧  </li>\n<li>android:drawableTop 图片在文字的上方  </li>\n<li>android:drawableRight 图片在文字的右侧  </li>\n<li>android:drawableBottom 图片在文字的下方  </li>\n<li>android:drawableStart 图片在文字的开始处 (API14才有,17生效)  </li>\n<li>android:drawableBottom  图片在文字的结尾 (API14才有,17生效)  </li>\n<li>android:drawablePadding 设置文字与图片之间的距离；  </li>\n</ul>\n<h1 id=\"how\"><a href=\"#how\" class=\"headerlink\" title=\"how\"></a>how</h1><pre><code>&lt;TextView\n         android:id=&quot;@+id/plus_tv&quot;\n         android:layout_width=&quot;400dp&quot;\n    android:layout_height=&quot;wrap_content&quot;\n        android:text=&quot;加分&quot;\n     android:textColor=&quot;@android:color/holo_blue_dark&quot;  \n     android:textSize=&quot;36sp&quot;\n     android:textStyle=&quot;bold&quot;\n     android:typeface=&quot;serif&quot;  \n        style=&quot;?buttonBarButtonStyle&quot;\n       android:gravity=&quot;center_horizontal&quot;\n     android:drawableBottom=&quot;@drawable/ic_sentiment_dissatisfied_black_48dp&quot;\n     android:drawablePadding=&quot;20dp&quot;\n     android:drawableTint=&quot;@color/colorAccent&quot;/&gt;  \n</code></pre><h1 id=\"question\"><a href=\"#question\" class=\"headerlink\" title=\"question\"></a>question</h1><h3 id=\"注意的问题\"><a href=\"#注意的问题\" class=\"headerlink\" title=\"注意的问题\"></a>注意的问题</h3><ul>\n<li>gravity属性只对文字起作用  </li>\n<li>drawable在其方向上居中显示；</li>\n<li>当TextView的宽高属性为wrap_content时，宽高取决于文字和图片的较宽或较高者；</li>\n</ul>\n<h3 id=\"局限性\"><a href=\"#局限性\" class=\"headerlink\" title=\"局限性\"></a>局限性</h3><ul>\n<li>当drawable的宽高不确定时；例如，drawable为shape时，shape的宽高取决于控件本身的高度；所以shape无法显示；  </li>\n<li>当需要对drawable进行单独控制时；</li>\n</ul>\n<p>参考资料: <a href=\"http://toughcoder.net/blog/2015/05/20/android-layout-trick-drawable-of-textview/\" target=\"_blank\" rel=\"noopener\">使用TextView的drawable属性</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"what\"><a href=\"#what\" class=\"headerlink\" title=\"what\"></a>what</h1><p>实现Icon+文字在一个视觉元素的需求;</p>\n<h3 id=\"drawable属性\"><a href=\"#drawable属性\" class=\"headerlink\" title=\"drawable属性\"></a>drawable属性</h3><ul>\n<li>android:drawableLeft 图片在文字的左侧  </li>\n<li>android:drawableTop 图片在文字的上方  </li>\n<li>android:drawableRight 图片在文字的右侧  </li>\n<li>android:drawableBottom 图片在文字的下方  </li>\n<li>android:drawableStart 图片在文字的开始处 (API14才有,17生效)  </li>\n<li>android:drawableBottom  图片在文字的结尾 (API14才有,17生效)  </li>\n<li>android:drawablePadding 设置文字与图片之间的距离；  </li>\n</ul>\n<h1 id=\"how\"><a href=\"#how\" class=\"headerlink\" title=\"how\"></a>how</h1><pre><code>&lt;TextView\n         android:id=&quot;@+id/plus_tv&quot;\n         android:layout_width=&quot;400dp&quot;\n    android:layout_height=&quot;wrap_content&quot;\n        android:text=&quot;加分&quot;\n     android:textColor=&quot;@android:color/holo_blue_dark&quot;  \n     android:textSize=&quot;36sp&quot;\n     android:textStyle=&quot;bold&quot;\n     android:typeface=&quot;serif&quot;  \n        style=&quot;?buttonBarButtonStyle&quot;\n       android:gravity=&quot;center_horizontal&quot;\n     android:drawableBottom=&quot;@drawable/ic_sentiment_dissatisfied_black_48dp&quot;\n     android:drawablePadding=&quot;20dp&quot;\n     android:drawableTint=&quot;@color/colorAccent&quot;/&gt;  \n</code></pre><h1 id=\"question\"><a href=\"#question\" class=\"headerlink\" title=\"question\"></a>question</h1><h3 id=\"注意的问题\"><a href=\"#注意的问题\" class=\"headerlink\" title=\"注意的问题\"></a>注意的问题</h3><ul>\n<li>gravity属性只对文字起作用  </li>\n<li>drawable在其方向上居中显示；</li>\n<li>当TextView的宽高属性为wrap_content时，宽高取决于文字和图片的较宽或较高者；</li>\n</ul>\n<h3 id=\"局限性\"><a href=\"#局限性\" class=\"headerlink\" title=\"局限性\"></a>局限性</h3><ul>\n<li>当drawable的宽高不确定时；例如，drawable为shape时，shape的宽高取决于控件本身的高度；所以shape无法显示；  </li>\n<li>当需要对drawable进行单独控制时；</li>\n</ul>\n<p>参考资料: <a href=\"http://toughcoder.net/blog/2015/05/20/android-layout-trick-drawable-of-textview/\" target=\"_blank\" rel=\"noopener\">使用TextView的drawable属性</a></p>\n"},{"title":"git","date":"2017-04-06T00:26:08.000Z","_content":"\n# 基本命令行\n\n 1. 打开GitBash;配置在服务端(GitLab/GitHub)注册用户名和邮箱  \n\n ```\n git config global user.name \"注册的用户名\"z\n git config global user.email \"注册的邮箱\"\n\n ```\n\n 2. 如果本地还没有仓库，使用GitBash ，进入想要存放项目的文件夹；  \n\n ```\n git clone \"远程仓库地址.git\"\n cd \"项目根文件夹名称\"\n git add .\n git checkout --file 取消暂存区域的文件；\n git commit -m \"提交信息\"\n git push -u origin master\n\n ```\n 3. 如果本地新建仓库\n\n ```\n  cd \"想要存放项目的文件夹\"\n  仓库初始化--- git init\n  关联远程仓库--- git remote add origin \"远程仓库地址.git\"\n  将所有文件添加到暂存区中--- git add .\n  提交到本地版本库中---git commit\n  将提交推送到远程分支--- git push -u origin master\n\n ```\n\n 4. 分支\n\n ```\n    * 创建--- git branch \"分支名字\n    * 切换--- git checkout \"想要切换到的分支\"\n    * 删除--- git branch -d \"想要删除的分支\"\n    * 创建并切换--- git checkout -b \"想要创建的分支的名字\"\n    * 查看提交日志--- git log \"--graph 或 --oneline\"\n    * git log \"分支1\"..\"分支2\" 表示分支2有那些提交没有合并到分支1\n\n ```\n\n 5. 合并\n\n ```\n  *  在这个分支下，合并其他分支的修改到本分支；git merge 参数 \"想要合并的分支\" ；\n      1. --fastforward(默认的合并方式; 简写为: -ff)\n      2. --no--ff\n      3. --squash 与前两者区别，不会看出来从其他分支的合并过程；\n\n  *  在这个分支下，将自己的修改合并到其他分支；git rebase \"想要变基的分支名称\"\n\n  * cherry-pick commitId 将某个分支的某次提交合并到所在的分支；\n\n  * git reset --hard（soft,mixed） commitID；回退到某个版本，包括index,工作区域，HEAD指针；\n\n ```\n\n 6. 关联远程分支\n\n ```\n  1. git branch --set-upstream-to=origin/关联的远程分支的名字\n  2. 更新 git pull origin 关联的远程分支的名字\n  3. 推送 git push origin 关联的远程分支的名字\n\n ```\n","source":"_posts/git.md","raw":"---\ntitle: git\ndate: 2017-04-06 08:26:08\ntags: 版本控制\n---\n\n# 基本命令行\n\n 1. 打开GitBash;配置在服务端(GitLab/GitHub)注册用户名和邮箱  \n\n ```\n git config global user.name \"注册的用户名\"z\n git config global user.email \"注册的邮箱\"\n\n ```\n\n 2. 如果本地还没有仓库，使用GitBash ，进入想要存放项目的文件夹；  \n\n ```\n git clone \"远程仓库地址.git\"\n cd \"项目根文件夹名称\"\n git add .\n git checkout --file 取消暂存区域的文件；\n git commit -m \"提交信息\"\n git push -u origin master\n\n ```\n 3. 如果本地新建仓库\n\n ```\n  cd \"想要存放项目的文件夹\"\n  仓库初始化--- git init\n  关联远程仓库--- git remote add origin \"远程仓库地址.git\"\n  将所有文件添加到暂存区中--- git add .\n  提交到本地版本库中---git commit\n  将提交推送到远程分支--- git push -u origin master\n\n ```\n\n 4. 分支\n\n ```\n    * 创建--- git branch \"分支名字\n    * 切换--- git checkout \"想要切换到的分支\"\n    * 删除--- git branch -d \"想要删除的分支\"\n    * 创建并切换--- git checkout -b \"想要创建的分支的名字\"\n    * 查看提交日志--- git log \"--graph 或 --oneline\"\n    * git log \"分支1\"..\"分支2\" 表示分支2有那些提交没有合并到分支1\n\n ```\n\n 5. 合并\n\n ```\n  *  在这个分支下，合并其他分支的修改到本分支；git merge 参数 \"想要合并的分支\" ；\n      1. --fastforward(默认的合并方式; 简写为: -ff)\n      2. --no--ff\n      3. --squash 与前两者区别，不会看出来从其他分支的合并过程；\n\n  *  在这个分支下，将自己的修改合并到其他分支；git rebase \"想要变基的分支名称\"\n\n  * cherry-pick commitId 将某个分支的某次提交合并到所在的分支；\n\n  * git reset --hard（soft,mixed） commitID；回退到某个版本，包括index,工作区域，HEAD指针；\n\n ```\n\n 6. 关联远程分支\n\n ```\n  1. git branch --set-upstream-to=origin/关联的远程分支的名字\n  2. 更新 git pull origin 关联的远程分支的名字\n  3. 推送 git push origin 关联的远程分支的名字\n\n ```\n","slug":"git","published":1,"updated":"2021-05-24T13:21:34.270Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckp5bxa8z0002ya3o2ysblw4w","content":"<h1 id=\"基本命令行\"><a href=\"#基本命令行\" class=\"headerlink\" title=\"基本命令行\"></a>基本命令行</h1><ol>\n<li><p>打开GitBash;配置在服务端(GitLab/GitHub)注册用户名和邮箱  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config global user.name &quot;注册的用户名&quot;z</span><br><span class=\"line\">git config global user.email &quot;注册的邮箱&quot;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>如果本地还没有仓库，使用GitBash ，进入想要存放项目的文件夹；  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone &quot;远程仓库地址.git&quot;</span><br><span class=\"line\">cd &quot;项目根文件夹名称&quot;</span><br><span class=\"line\">git add .</span><br><span class=\"line\">git checkout --file 取消暂存区域的文件；</span><br><span class=\"line\">git commit -m &quot;提交信息&quot;</span><br><span class=\"line\">git push -u origin master</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>如果本地新建仓库</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd &quot;想要存放项目的文件夹&quot;</span><br><span class=\"line\">仓库初始化--- git init</span><br><span class=\"line\">关联远程仓库--- git remote add origin &quot;远程仓库地址.git&quot;</span><br><span class=\"line\">将所有文件添加到暂存区中--- git add .</span><br><span class=\"line\">提交到本地版本库中---git commit</span><br><span class=\"line\">将提交推送到远程分支--- git push -u origin master</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>分支</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* 创建--- git branch &quot;分支名字</span><br><span class=\"line\">* 切换--- git checkout &quot;想要切换到的分支&quot;</span><br><span class=\"line\">* 删除--- git branch -d &quot;想要删除的分支&quot;</span><br><span class=\"line\">* 创建并切换--- git checkout -b &quot;想要创建的分支的名字&quot;</span><br><span class=\"line\">* 查看提交日志--- git log &quot;--graph 或 --oneline&quot;</span><br><span class=\"line\">* git log &quot;分支1&quot;..&quot;分支2&quot; 表示分支2有那些提交没有合并到分支1</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>合并</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">*  在这个分支下，合并其他分支的修改到本分支；git merge 参数 &quot;想要合并的分支&quot; ；</span><br><span class=\"line\">    1. --fastforward(默认的合并方式; 简写为: -ff)</span><br><span class=\"line\">    2. --no--ff</span><br><span class=\"line\">    3. --squash 与前两者区别，不会看出来从其他分支的合并过程；</span><br><span class=\"line\"></span><br><span class=\"line\">*  在这个分支下，将自己的修改合并到其他分支；git rebase &quot;想要变基的分支名称&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">* cherry-pick commitId 将某个分支的某次提交合并到所在的分支；</span><br><span class=\"line\"></span><br><span class=\"line\">* git reset --hard（soft,mixed） commitID；回退到某个版本，包括index,工作区域，HEAD指针；</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>关联远程分支</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. git branch --set-upstream-to=origin/关联的远程分支的名字</span><br><span class=\"line\">2. 更新 git pull origin 关联的远程分支的名字</span><br><span class=\"line\">3. 推送 git push origin 关联的远程分支的名字</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"基本命令行\"><a href=\"#基本命令行\" class=\"headerlink\" title=\"基本命令行\"></a>基本命令行</h1><ol>\n<li><p>打开GitBash;配置在服务端(GitLab/GitHub)注册用户名和邮箱  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config global user.name &quot;注册的用户名&quot;z</span><br><span class=\"line\">git config global user.email &quot;注册的邮箱&quot;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>如果本地还没有仓库，使用GitBash ，进入想要存放项目的文件夹；  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone &quot;远程仓库地址.git&quot;</span><br><span class=\"line\">cd &quot;项目根文件夹名称&quot;</span><br><span class=\"line\">git add .</span><br><span class=\"line\">git checkout --file 取消暂存区域的文件；</span><br><span class=\"line\">git commit -m &quot;提交信息&quot;</span><br><span class=\"line\">git push -u origin master</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>如果本地新建仓库</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd &quot;想要存放项目的文件夹&quot;</span><br><span class=\"line\">仓库初始化--- git init</span><br><span class=\"line\">关联远程仓库--- git remote add origin &quot;远程仓库地址.git&quot;</span><br><span class=\"line\">将所有文件添加到暂存区中--- git add .</span><br><span class=\"line\">提交到本地版本库中---git commit</span><br><span class=\"line\">将提交推送到远程分支--- git push -u origin master</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>分支</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* 创建--- git branch &quot;分支名字</span><br><span class=\"line\">* 切换--- git checkout &quot;想要切换到的分支&quot;</span><br><span class=\"line\">* 删除--- git branch -d &quot;想要删除的分支&quot;</span><br><span class=\"line\">* 创建并切换--- git checkout -b &quot;想要创建的分支的名字&quot;</span><br><span class=\"line\">* 查看提交日志--- git log &quot;--graph 或 --oneline&quot;</span><br><span class=\"line\">* git log &quot;分支1&quot;..&quot;分支2&quot; 表示分支2有那些提交没有合并到分支1</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>合并</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">*  在这个分支下，合并其他分支的修改到本分支；git merge 参数 &quot;想要合并的分支&quot; ；</span><br><span class=\"line\">    1. --fastforward(默认的合并方式; 简写为: -ff)</span><br><span class=\"line\">    2. --no--ff</span><br><span class=\"line\">    3. --squash 与前两者区别，不会看出来从其他分支的合并过程；</span><br><span class=\"line\"></span><br><span class=\"line\">*  在这个分支下，将自己的修改合并到其他分支；git rebase &quot;想要变基的分支名称&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">* cherry-pick commitId 将某个分支的某次提交合并到所在的分支；</span><br><span class=\"line\"></span><br><span class=\"line\">* git reset --hard（soft,mixed） commitID；回退到某个版本，包括index,工作区域，HEAD指针；</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>关联远程分支</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. git branch --set-upstream-to=origin/关联的远程分支的名字</span><br><span class=\"line\">2. 更新 git pull origin 关联的远程分支的名字</span><br><span class=\"line\">3. 推送 git push origin 关联的远程分支的名字</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n"},{"title":"Jenkin + Git + Gradle 为 Android 项目搭建 CI 环境","date":"2017-04-06T00:26:08.000Z","_content":"\n# [配置Tomcat][tomcat_url]\n * windows系统环境变量\n\n  ![](../img/ci/tomcat.png)\n\n  ![](../img/ci/tomcat1.png)\n\n# [jenkins安装](jenkins_url)\n\n  * jenkins 支持安装版和war包两种安装方式，这里介绍的是war包安装；\n\n  * 下载.war文件，在tomcat安装目录下的webapps下新建jenkins文件夹，将war包放到该文件夹下；打开cmd,进入jenkins目录，执行`java -jar jenkins.war`，浏览器访问` localhost:8080 `,会在C盘对应用户目录下生成`.jenkins`目录；\n\n# 基本配置\n\n  * 遇到创建账户的问题，如果自己注册的账户失败可以使用默认账号`admin`和`C:\\Users\\登录用户\\.jenkins\\secrets\\initialAdminPassword 中的账号登录`\n\n  * 下载必要的插件后，进入系统管理->Global Tool Configuration，配置本地的jdk,Gradle,Android Git 路径;\n\n  * 系统管理->系统设置->全局属性版块勾选上 `Environment variables` 选项，然后添加 `Android SDK` 的目录\n\n# 触发构建\n\n *\n\n\n\n[tomcat_url]: http://tomcat.apache.org/\n[jenkins_url]:https://jenkins.io/","source":"_posts/Jenkin + Git + Gradle 为 Android 项目搭建 CI 环境.md","raw":"---\ntitle: Jenkin + Git + Gradle 为 Android 项目搭建 CI 环境\ndate: 2017-04-06 08:26:08\ntags: 项目管理 自动化构建\ncategories: 持续集成\n---\n\n# [配置Tomcat][tomcat_url]\n * windows系统环境变量\n\n  ![](../img/ci/tomcat.png)\n\n  ![](../img/ci/tomcat1.png)\n\n# [jenkins安装](jenkins_url)\n\n  * jenkins 支持安装版和war包两种安装方式，这里介绍的是war包安装；\n\n  * 下载.war文件，在tomcat安装目录下的webapps下新建jenkins文件夹，将war包放到该文件夹下；打开cmd,进入jenkins目录，执行`java -jar jenkins.war`，浏览器访问` localhost:8080 `,会在C盘对应用户目录下生成`.jenkins`目录；\n\n# 基本配置\n\n  * 遇到创建账户的问题，如果自己注册的账户失败可以使用默认账号`admin`和`C:\\Users\\登录用户\\.jenkins\\secrets\\initialAdminPassword 中的账号登录`\n\n  * 下载必要的插件后，进入系统管理->Global Tool Configuration，配置本地的jdk,Gradle,Android Git 路径;\n\n  * 系统管理->系统设置->全局属性版块勾选上 `Environment variables` 选项，然后添加 `Android SDK` 的目录\n\n# 触发构建\n\n *\n\n\n\n[tomcat_url]: http://tomcat.apache.org/\n[jenkins_url]:https://jenkins.io/","slug":"Jenkin + Git + Gradle 为 Android 项目搭建 CI 环境","published":1,"updated":"2021-05-26T10:34:51.392Z","_id":"ckp5bxa900003ya3ot8fc0lsx","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"配置Tomcat\"><a href=\"#配置Tomcat\" class=\"headerlink\" title=\"配置Tomcat\"></a><a href=\"http://tomcat.apache.org/\" target=\"_blank\" rel=\"noopener\">配置Tomcat</a></h1><ul>\n<li><p>windows系统环境变量</p>\n<p><img src=\"../img/ci/tomcat.png\" alt></p>\n<p><img src=\"../img/ci/tomcat1.png\" alt></p>\n</li>\n</ul>\n<h1 id=\"jenkins安装\"><a href=\"#jenkins安装\" class=\"headerlink\" title=\"jenkins安装\"></a><a href=\"jenkins_url\">jenkins安装</a></h1><ul>\n<li><p>jenkins 支持安装版和war包两种安装方式，这里介绍的是war包安装；</p>\n</li>\n<li><p>下载.war文件，在tomcat安装目录下的webapps下新建jenkins文件夹，将war包放到该文件夹下；打开cmd,进入jenkins目录，执行<code>java -jar jenkins.war</code>，浏览器访问<code>localhost:8080</code>,会在C盘对应用户目录下生成<code>.jenkins</code>目录；</p>\n</li>\n</ul>\n<h1 id=\"基本配置\"><a href=\"#基本配置\" class=\"headerlink\" title=\"基本配置\"></a>基本配置</h1><ul>\n<li><p>遇到创建账户的问题，如果自己注册的账户失败可以使用默认账号<code>admin</code>和<code>C:\\Users\\登录用户\\.jenkins\\secrets\\initialAdminPassword 中的账号登录</code></p>\n</li>\n<li><p>下载必要的插件后，进入系统管理-&gt;Global Tool Configuration，配置本地的jdk,Gradle,Android Git 路径;</p>\n</li>\n<li><p>系统管理-&gt;系统设置-&gt;全局属性版块勾选上 <code>Environment variables</code> 选项，然后添加 <code>Android SDK</code> 的目录</p>\n</li>\n</ul>\n<h1 id=\"触发构建\"><a href=\"#触发构建\" class=\"headerlink\" title=\"触发构建\"></a>触发构建</h1><p> *</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"配置Tomcat\"><a href=\"#配置Tomcat\" class=\"headerlink\" title=\"配置Tomcat\"></a><a href=\"http://tomcat.apache.org/\" target=\"_blank\" rel=\"noopener\">配置Tomcat</a></h1><ul>\n<li><p>windows系统环境变量</p>\n<p><img src=\"../img/ci/tomcat.png\" alt></p>\n<p><img src=\"../img/ci/tomcat1.png\" alt></p>\n</li>\n</ul>\n<h1 id=\"jenkins安装\"><a href=\"#jenkins安装\" class=\"headerlink\" title=\"jenkins安装\"></a><a href=\"jenkins_url\">jenkins安装</a></h1><ul>\n<li><p>jenkins 支持安装版和war包两种安装方式，这里介绍的是war包安装；</p>\n</li>\n<li><p>下载.war文件，在tomcat安装目录下的webapps下新建jenkins文件夹，将war包放到该文件夹下；打开cmd,进入jenkins目录，执行<code>java -jar jenkins.war</code>，浏览器访问<code>localhost:8080</code>,会在C盘对应用户目录下生成<code>.jenkins</code>目录；</p>\n</li>\n</ul>\n<h1 id=\"基本配置\"><a href=\"#基本配置\" class=\"headerlink\" title=\"基本配置\"></a>基本配置</h1><ul>\n<li><p>遇到创建账户的问题，如果自己注册的账户失败可以使用默认账号<code>admin</code>和<code>C:\\Users\\登录用户\\.jenkins\\secrets\\initialAdminPassword 中的账号登录</code></p>\n</li>\n<li><p>下载必要的插件后，进入系统管理-&gt;Global Tool Configuration，配置本地的jdk,Gradle,Android Git 路径;</p>\n</li>\n<li><p>系统管理-&gt;系统设置-&gt;全局属性版块勾选上 <code>Environment variables</code> 选项，然后添加 <code>Android SDK</code> 的目录</p>\n</li>\n</ul>\n<h1 id=\"触发构建\"><a href=\"#触发构建\" class=\"headerlink\" title=\"触发构建\"></a>触发构建</h1><p> *</p>\n"},{"title":"Android 登录界面随软键盘弹出滑动","date":"2016-04-23T00:52:43.000Z","_content":"\n# Android 登录界面随软键盘弹出滑动\n![](http://ooot3t1wg.bkt.clouddn.com/soft-slide.gif)\n\n# 思路\n在项目中遇到软键盘弹出遮挡登录按钮和登录输入框，需要将登录按钮和和输入框上移；\n解决思路:监听软件盘的弹出，计算弹出后软键盘顶部的高度，计算登录按钮底部的高度，计算登录按钮以上的的整个布局需要的偏移量，使用属性动画进行偏移；\n# 登录按钮的底部在Y轴的位置\n\n```java\n //按钮底部在Y轴的坐标\n int btnY = 0;\n btn_login.getViewTreeObserver().addOnGlobalLayoutListener(new ViewTreeObserver.OnGlobalLayoutListener() {\n             @Override\n             public void onGlobalLayout() {\n                 int[] location = new int[2];\n                 //获取登录按钮左上定点的坐标\n                 btn_login.getLocationOnScreen(location);\n                 btnY = location[1] + btn_login.getHeight();\n                 btn_login.getViewTreeObserver().removeOnGlobalLayoutListener(this);\n             }\n         });\n```\n\n# 监听软键盘的显示与隐藏\n\n```java\n/***\n     * 判断软件盘是否弹出\n     * @param v\n     * @param listener\n     * 备注：在不用的时候记得移除OnGlobalLayoutListener\n     * */\n    public static ViewTreeObserver.OnGlobalLayoutListener doMonitorSoftKeyboard(final View v,final OnSoftKeyBoardListener listener) {\n        final ViewTreeObserver.OnGlobalLayoutListener layoutListener = new ViewTreeObserver.OnGlobalLayoutListener() {\n            @Override\n            public void onGlobalLayout() {\n                Rect r = new Rect();\n                // 获取屏幕的可见范围保存在矩形r中\n                v.getWindowVisibleDisplayFrame(r);\n                int screenHeight = v.getRootView().getHeight();\n                //软件盘高度 = 屏幕真实高度 - 屏幕可见范围的高度\n                int heightDifference = screenHeight-r.bottom;\n                boolean isSoftVisible = heightDifference > (screenHeight / 3);\n                if(listener != null) {\n                    listener.hasShow(isSoftVisible);\n                }\n            }\n        };\n        v.getViewTreeObserver().addOnGlobalLayoutListener(layoutListener);\n        return layoutListener;\n    }\n```\n\n# 在软键盘显示时计算登录按钮以上的布局需要偏移的距离 `delta`\n\n```java\n\tif(isShow) {\n\t\t\tRect r = new Rect();\n\t\t\tll_root.getWindowVisibleDisplayFrame(r);\n\t\t\tdelta =  (float) Math.abs(r.bottom - btnY);\n\t\t\tAnimUtil.up(ll_login,-delta);\n\t\t\tAnimUtil.up(iv_logo,-delta/3);\n\t\t} else {\n\t\t\tAnimUtil.up(ll_login,0);\n\t\t\tAnimUtil.up(iv_logo,0);\n\t\t}\n\n```\n\n示例已经上传到[github](https://github.com/HezEngineer/CodePie)。","source":"_posts/Android 登录界面随软键盘弹出滑动.md","raw":"---\ntitle: Android 登录界面随软键盘弹出滑动\ndate: 2016-04-23 08:52:43\ntags: android布局 软键盘 Android\ncategories: android\n---\n\n# Android 登录界面随软键盘弹出滑动\n![](http://ooot3t1wg.bkt.clouddn.com/soft-slide.gif)\n\n# 思路\n在项目中遇到软键盘弹出遮挡登录按钮和登录输入框，需要将登录按钮和和输入框上移；\n解决思路:监听软件盘的弹出，计算弹出后软键盘顶部的高度，计算登录按钮底部的高度，计算登录按钮以上的的整个布局需要的偏移量，使用属性动画进行偏移；\n# 登录按钮的底部在Y轴的位置\n\n```java\n //按钮底部在Y轴的坐标\n int btnY = 0;\n btn_login.getViewTreeObserver().addOnGlobalLayoutListener(new ViewTreeObserver.OnGlobalLayoutListener() {\n             @Override\n             public void onGlobalLayout() {\n                 int[] location = new int[2];\n                 //获取登录按钮左上定点的坐标\n                 btn_login.getLocationOnScreen(location);\n                 btnY = location[1] + btn_login.getHeight();\n                 btn_login.getViewTreeObserver().removeOnGlobalLayoutListener(this);\n             }\n         });\n```\n\n# 监听软键盘的显示与隐藏\n\n```java\n/***\n     * 判断软件盘是否弹出\n     * @param v\n     * @param listener\n     * 备注：在不用的时候记得移除OnGlobalLayoutListener\n     * */\n    public static ViewTreeObserver.OnGlobalLayoutListener doMonitorSoftKeyboard(final View v,final OnSoftKeyBoardListener listener) {\n        final ViewTreeObserver.OnGlobalLayoutListener layoutListener = new ViewTreeObserver.OnGlobalLayoutListener() {\n            @Override\n            public void onGlobalLayout() {\n                Rect r = new Rect();\n                // 获取屏幕的可见范围保存在矩形r中\n                v.getWindowVisibleDisplayFrame(r);\n                int screenHeight = v.getRootView().getHeight();\n                //软件盘高度 = 屏幕真实高度 - 屏幕可见范围的高度\n                int heightDifference = screenHeight-r.bottom;\n                boolean isSoftVisible = heightDifference > (screenHeight / 3);\n                if(listener != null) {\n                    listener.hasShow(isSoftVisible);\n                }\n            }\n        };\n        v.getViewTreeObserver().addOnGlobalLayoutListener(layoutListener);\n        return layoutListener;\n    }\n```\n\n# 在软键盘显示时计算登录按钮以上的布局需要偏移的距离 `delta`\n\n```java\n\tif(isShow) {\n\t\t\tRect r = new Rect();\n\t\t\tll_root.getWindowVisibleDisplayFrame(r);\n\t\t\tdelta =  (float) Math.abs(r.bottom - btnY);\n\t\t\tAnimUtil.up(ll_login,-delta);\n\t\t\tAnimUtil.up(iv_logo,-delta/3);\n\t\t} else {\n\t\t\tAnimUtil.up(ll_login,0);\n\t\t\tAnimUtil.up(iv_logo,0);\n\t\t}\n\n```\n\n示例已经上传到[github](https://github.com/HezEngineer/CodePie)。","slug":"Android 登录界面随软键盘弹出滑动","published":1,"updated":"2021-05-26T10:34:26.938Z","_id":"ckp5bxa910004ya3oh3j5et5x","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"Android-登录界面随软键盘弹出滑动\"><a href=\"#Android-登录界面随软键盘弹出滑动\" class=\"headerlink\" title=\"Android 登录界面随软键盘弹出滑动\"></a>Android 登录界面随软键盘弹出滑动</h1><p><img src=\"http://ooot3t1wg.bkt.clouddn.com/soft-slide.gif\" alt></p>\n<h1 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h1><p>在项目中遇到软键盘弹出遮挡登录按钮和登录输入框，需要将登录按钮和和输入框上移；<br>解决思路:监听软件盘的弹出，计算弹出后软键盘顶部的高度，计算登录按钮底部的高度，计算登录按钮以上的的整个布局需要的偏移量，使用属性动画进行偏移；</p>\n<h1 id=\"登录按钮的底部在Y轴的位置\"><a href=\"#登录按钮的底部在Y轴的位置\" class=\"headerlink\" title=\"登录按钮的底部在Y轴的位置\"></a>登录按钮的底部在Y轴的位置</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//按钮底部在Y轴的坐标</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> btnY = <span class=\"number\">0</span>;</span><br><span class=\"line\">btn_login.getViewTreeObserver().addOnGlobalLayoutListener(<span class=\"keyword\">new</span> ViewTreeObserver.OnGlobalLayoutListener() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onGlobalLayout</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">int</span>[] location = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">2</span>];</span><br><span class=\"line\">                <span class=\"comment\">//获取登录按钮左上定点的坐标</span></span><br><span class=\"line\">                btn_login.getLocationOnScreen(location);</span><br><span class=\"line\">                btnY = location[<span class=\"number\">1</span>] + btn_login.getHeight();</span><br><span class=\"line\">                btn_login.getViewTreeObserver().removeOnGlobalLayoutListener(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br></pre></td></tr></table></figure>\n<h1 id=\"监听软键盘的显示与隐藏\"><a href=\"#监听软键盘的显示与隐藏\" class=\"headerlink\" title=\"监听软键盘的显示与隐藏\"></a>监听软键盘的显示与隐藏</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/***</span></span><br><span class=\"line\"><span class=\"comment\">     * 判断软件盘是否弹出</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> v</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> listener</span></span><br><span class=\"line\"><span class=\"comment\">     * 备注：在不用的时候记得移除OnGlobalLayoutListener</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ViewTreeObserver.<span class=\"function\">OnGlobalLayoutListener <span class=\"title\">doMonitorSoftKeyboard</span><span class=\"params\">(<span class=\"keyword\">final</span> View v,<span class=\"keyword\">final</span> OnSoftKeyBoardListener listener)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> ViewTreeObserver.OnGlobalLayoutListener layoutListener = <span class=\"keyword\">new</span> ViewTreeObserver.OnGlobalLayoutListener() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onGlobalLayout</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                Rect r = <span class=\"keyword\">new</span> Rect();</span><br><span class=\"line\">                <span class=\"comment\">// 获取屏幕的可见范围保存在矩形r中</span></span><br><span class=\"line\">                v.getWindowVisibleDisplayFrame(r);</span><br><span class=\"line\">                <span class=\"keyword\">int</span> screenHeight = v.getRootView().getHeight();</span><br><span class=\"line\">                <span class=\"comment\">//软件盘高度 = 屏幕真实高度 - 屏幕可见范围的高度</span></span><br><span class=\"line\">                <span class=\"keyword\">int</span> heightDifference = screenHeight-r.bottom;</span><br><span class=\"line\">                <span class=\"keyword\">boolean</span> isSoftVisible = heightDifference &gt; (screenHeight / <span class=\"number\">3</span>);</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(listener != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                    listener.hasShow(isSoftVisible);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        v.getViewTreeObserver().addOnGlobalLayoutListener(layoutListener);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> layoutListener;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"在软键盘显示时计算登录按钮以上的布局需要偏移的距离-delta\"><a href=\"#在软键盘显示时计算登录按钮以上的布局需要偏移的距离-delta\" class=\"headerlink\" title=\"在软键盘显示时计算登录按钮以上的布局需要偏移的距离 delta\"></a>在软键盘显示时计算登录按钮以上的布局需要偏移的距离 <code>delta</code></h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(isShow) &#123;</span><br><span class=\"line\">\t\tRect r = <span class=\"keyword\">new</span> Rect();</span><br><span class=\"line\">\t\tll_root.getWindowVisibleDisplayFrame(r);</span><br><span class=\"line\">\t\tdelta =  (<span class=\"keyword\">float</span>) Math.abs(r.bottom - btnY);</span><br><span class=\"line\">\t\tAnimUtil.up(ll_login,-delta);</span><br><span class=\"line\">\t\tAnimUtil.up(iv_logo,-delta/<span class=\"number\">3</span>);</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\tAnimUtil.up(ll_login,<span class=\"number\">0</span>);</span><br><span class=\"line\">\t\tAnimUtil.up(iv_logo,<span class=\"number\">0</span>);</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n<p>示例已经上传到<a href=\"https://github.com/HezEngineer/CodePie\" target=\"_blank\" rel=\"noopener\">github</a>。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Android-登录界面随软键盘弹出滑动\"><a href=\"#Android-登录界面随软键盘弹出滑动\" class=\"headerlink\" title=\"Android 登录界面随软键盘弹出滑动\"></a>Android 登录界面随软键盘弹出滑动</h1><p><img src=\"http://ooot3t1wg.bkt.clouddn.com/soft-slide.gif\" alt></p>\n<h1 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h1><p>在项目中遇到软键盘弹出遮挡登录按钮和登录输入框，需要将登录按钮和和输入框上移；<br>解决思路:监听软件盘的弹出，计算弹出后软键盘顶部的高度，计算登录按钮底部的高度，计算登录按钮以上的的整个布局需要的偏移量，使用属性动画进行偏移；</p>\n<h1 id=\"登录按钮的底部在Y轴的位置\"><a href=\"#登录按钮的底部在Y轴的位置\" class=\"headerlink\" title=\"登录按钮的底部在Y轴的位置\"></a>登录按钮的底部在Y轴的位置</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//按钮底部在Y轴的坐标</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> btnY = <span class=\"number\">0</span>;</span><br><span class=\"line\">btn_login.getViewTreeObserver().addOnGlobalLayoutListener(<span class=\"keyword\">new</span> ViewTreeObserver.OnGlobalLayoutListener() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onGlobalLayout</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">int</span>[] location = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">2</span>];</span><br><span class=\"line\">                <span class=\"comment\">//获取登录按钮左上定点的坐标</span></span><br><span class=\"line\">                btn_login.getLocationOnScreen(location);</span><br><span class=\"line\">                btnY = location[<span class=\"number\">1</span>] + btn_login.getHeight();</span><br><span class=\"line\">                btn_login.getViewTreeObserver().removeOnGlobalLayoutListener(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br></pre></td></tr></table></figure>\n<h1 id=\"监听软键盘的显示与隐藏\"><a href=\"#监听软键盘的显示与隐藏\" class=\"headerlink\" title=\"监听软键盘的显示与隐藏\"></a>监听软键盘的显示与隐藏</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/***</span></span><br><span class=\"line\"><span class=\"comment\">     * 判断软件盘是否弹出</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> v</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> listener</span></span><br><span class=\"line\"><span class=\"comment\">     * 备注：在不用的时候记得移除OnGlobalLayoutListener</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ViewTreeObserver.<span class=\"function\">OnGlobalLayoutListener <span class=\"title\">doMonitorSoftKeyboard</span><span class=\"params\">(<span class=\"keyword\">final</span> View v,<span class=\"keyword\">final</span> OnSoftKeyBoardListener listener)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> ViewTreeObserver.OnGlobalLayoutListener layoutListener = <span class=\"keyword\">new</span> ViewTreeObserver.OnGlobalLayoutListener() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onGlobalLayout</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                Rect r = <span class=\"keyword\">new</span> Rect();</span><br><span class=\"line\">                <span class=\"comment\">// 获取屏幕的可见范围保存在矩形r中</span></span><br><span class=\"line\">                v.getWindowVisibleDisplayFrame(r);</span><br><span class=\"line\">                <span class=\"keyword\">int</span> screenHeight = v.getRootView().getHeight();</span><br><span class=\"line\">                <span class=\"comment\">//软件盘高度 = 屏幕真实高度 - 屏幕可见范围的高度</span></span><br><span class=\"line\">                <span class=\"keyword\">int</span> heightDifference = screenHeight-r.bottom;</span><br><span class=\"line\">                <span class=\"keyword\">boolean</span> isSoftVisible = heightDifference &gt; (screenHeight / <span class=\"number\">3</span>);</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(listener != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                    listener.hasShow(isSoftVisible);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        v.getViewTreeObserver().addOnGlobalLayoutListener(layoutListener);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> layoutListener;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"在软键盘显示时计算登录按钮以上的布局需要偏移的距离-delta\"><a href=\"#在软键盘显示时计算登录按钮以上的布局需要偏移的距离-delta\" class=\"headerlink\" title=\"在软键盘显示时计算登录按钮以上的布局需要偏移的距离 delta\"></a>在软键盘显示时计算登录按钮以上的布局需要偏移的距离 <code>delta</code></h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(isShow) &#123;</span><br><span class=\"line\">\t\tRect r = <span class=\"keyword\">new</span> Rect();</span><br><span class=\"line\">\t\tll_root.getWindowVisibleDisplayFrame(r);</span><br><span class=\"line\">\t\tdelta =  (<span class=\"keyword\">float</span>) Math.abs(r.bottom - btnY);</span><br><span class=\"line\">\t\tAnimUtil.up(ll_login,-delta);</span><br><span class=\"line\">\t\tAnimUtil.up(iv_logo,-delta/<span class=\"number\">3</span>);</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\tAnimUtil.up(ll_login,<span class=\"number\">0</span>);</span><br><span class=\"line\">\t\tAnimUtil.up(iv_logo,<span class=\"number\">0</span>);</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n<p>示例已经上传到<a href=\"https://github.com/HezEngineer/CodePie\" target=\"_blank\" rel=\"noopener\">github</a>。</p>\n"},{"title":"博客搭建 : hexo + GitHub + 多机同步","date":"2017-03-26T04:50:02.000Z","_content":"# 博客搭建 : hexo + GitHub + 多机同步  \n\n记录 [hexo][hexo_url] 博客搭建及如何实现多机同步；\n\n ## [安装 Git][git_url]   \n\n安装完后，打开 Git bash , 配置用户名和邮箱\n\n ```   \n  $ git config --global user.name \"William\"\n  $ git config --global user.email William@example.com\n  输入 git --version 显示版本号则安装成功\n ```\n ## [安装 Node.js][node_url]\n\n  输入 node -v 和 npm -v，如果显示版本号则安装成功；\n\n ## [GitHub 仓库创建][github_url]\n\n   1. 创建仓库，命名为 \"GitHub Username\".github.io; 注意 GitHub Username 必须为 GitHub 的用户名\n   2. 建好之后，该仓库默认有个分支 master (用来存放生成的静态网页), 再创建一个分支命名为 hexo (用来存放生成网站的原始文件)，并将 hexo 分支设置为 默认分支\n   3. 使用 `git clone git@github.com:username/username.github.io.git` 拷贝仓库\n   4. 使用 Git bash 进入本地仓库 username.github.io.git(此时分支应为 hexo )， 依次执行 `npm install hexo`,`hexo init`,`npm install`,`npm install hexo-deployer-git`\n   5. 修改 `_congig.yml` 的 deploy 参数，分支应为 master ,表示生成的静态网页文件将被推送到 master 分支上；\n   ```\n  deploy:\n   type: git\n   repo: https://github.com/username/username.github.io.git\n   branch: master\n\n   ```\n   6. 执行 `git add .`,`git commit -m \"提交信息\"`,`git push origin hexo`\n   7. 执行 `hexo g -d` 将生成的网站部署到 GitHub 上；\n\n## 平时维护\n  1. 本地添加博客或修改主题后，执行 `git add .`,`git commit -m \"提交信息\"`,`git push origin hexo`将修改推送到远程分支 hexo 上；\n  2. 使用 hexo g 生成静态文件， hexo s 开启服务器预览 ，浏览器输入 http://localhost:4000 即可预览；使用 hexo d 将生成的静态文件部署到 master 分支上；\n\n## 多机维护\n  1. 在另一台电脑上，将未安装的软件先安装，之后执行 `GitHub 仓库创建` 的  2，3步（第三步不需要执行 hexo init 命令）\n\n## 遇到的问题\n  1. `Error: bash: /dev/tty: No such device or address`， 因为我在 cmd 去进行上述操作，该成 Git bash 之后就没有该问题了；\n\n  2. `hexo command not found`, 使用 `npm install -g hexo` 安装 hexo\n\n  3. 第二台电脑同步部署完成之后，打开网站空白，原因是主题文件家为空，在 `_congif.yml` 中指定的主题不存在. 解决方案,重新 clone 一份\n\n\n## 最后  \n\n 1. 推荐使用 [atom][atom_url] 编辑 md 文件；\n\n## 参考  \n\n[知乎回答][zhihu_url]\n\n\n[git_url]: (https://www.git-scm.com/download)\n\n[hexo_url]: (https://hexo.io/zh-cn/docs/index.html)\n\n[github_url]: (https://github.com)\n\n[node_url]: (https://nodejs.org/en)\n\n[atom_url]: (https://atom.io)\n\n[zhihu_url]:https://www.zhihu.com/question/21193762","source":"_posts/博客搭建-hexo-Github-多机同步.md","raw":"---\ntitle: '博客搭建 : hexo + GitHub + 多机同步'\ndate: 2017-03-26 12:50:02\ntags: hexo\ncategories: android\n\n---\n# 博客搭建 : hexo + GitHub + 多机同步  \n\n记录 [hexo][hexo_url] 博客搭建及如何实现多机同步；\n\n ## [安装 Git][git_url]   \n\n安装完后，打开 Git bash , 配置用户名和邮箱\n\n ```   \n  $ git config --global user.name \"William\"\n  $ git config --global user.email William@example.com\n  输入 git --version 显示版本号则安装成功\n ```\n ## [安装 Node.js][node_url]\n\n  输入 node -v 和 npm -v，如果显示版本号则安装成功；\n\n ## [GitHub 仓库创建][github_url]\n\n   1. 创建仓库，命名为 \"GitHub Username\".github.io; 注意 GitHub Username 必须为 GitHub 的用户名\n   2. 建好之后，该仓库默认有个分支 master (用来存放生成的静态网页), 再创建一个分支命名为 hexo (用来存放生成网站的原始文件)，并将 hexo 分支设置为 默认分支\n   3. 使用 `git clone git@github.com:username/username.github.io.git` 拷贝仓库\n   4. 使用 Git bash 进入本地仓库 username.github.io.git(此时分支应为 hexo )， 依次执行 `npm install hexo`,`hexo init`,`npm install`,`npm install hexo-deployer-git`\n   5. 修改 `_congig.yml` 的 deploy 参数，分支应为 master ,表示生成的静态网页文件将被推送到 master 分支上；\n   ```\n  deploy:\n   type: git\n   repo: https://github.com/username/username.github.io.git\n   branch: master\n\n   ```\n   6. 执行 `git add .`,`git commit -m \"提交信息\"`,`git push origin hexo`\n   7. 执行 `hexo g -d` 将生成的网站部署到 GitHub 上；\n\n## 平时维护\n  1. 本地添加博客或修改主题后，执行 `git add .`,`git commit -m \"提交信息\"`,`git push origin hexo`将修改推送到远程分支 hexo 上；\n  2. 使用 hexo g 生成静态文件， hexo s 开启服务器预览 ，浏览器输入 http://localhost:4000 即可预览；使用 hexo d 将生成的静态文件部署到 master 分支上；\n\n## 多机维护\n  1. 在另一台电脑上，将未安装的软件先安装，之后执行 `GitHub 仓库创建` 的  2，3步（第三步不需要执行 hexo init 命令）\n\n## 遇到的问题\n  1. `Error: bash: /dev/tty: No such device or address`， 因为我在 cmd 去进行上述操作，该成 Git bash 之后就没有该问题了；\n\n  2. `hexo command not found`, 使用 `npm install -g hexo` 安装 hexo\n\n  3. 第二台电脑同步部署完成之后，打开网站空白，原因是主题文件家为空，在 `_congif.yml` 中指定的主题不存在. 解决方案,重新 clone 一份\n\n\n## 最后  \n\n 1. 推荐使用 [atom][atom_url] 编辑 md 文件；\n\n## 参考  \n\n[知乎回答][zhihu_url]\n\n\n[git_url]: (https://www.git-scm.com/download)\n\n[hexo_url]: (https://hexo.io/zh-cn/docs/index.html)\n\n[github_url]: (https://github.com)\n\n[node_url]: (https://nodejs.org/en)\n\n[atom_url]: (https://atom.io)\n\n[zhihu_url]:https://www.zhihu.com/question/21193762","slug":"博客搭建-hexo-Github-多机同步","published":1,"updated":"2021-05-26T10:07:40.700Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckp5bxa920005ya3ohckh6gw0","content":"<h1 id=\"博客搭建-hexo-GitHub-多机同步\"><a href=\"#博客搭建-hexo-GitHub-多机同步\" class=\"headerlink\" title=\"博客搭建 : hexo + GitHub + 多机同步\"></a>博客搭建 : hexo + GitHub + 多机同步</h1><p>记录 <a href=\"(https://hexo.io/zh-cn/docs/index.html)\">hexo</a> 博客搭建及如何实现多机同步；</p>\n<h2 id=\"安装-Git\"><a href=\"#安装-Git\" class=\"headerlink\" title=\"安装 Git\"></a><a href=\"(https://www.git-scm.com/download)\">安装 Git</a></h2><p>安装完后，打开 Git bash , 配置用户名和邮箱</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git config --global user.name &quot;William&quot;</span><br><span class=\"line\">$ git config --global user.email William@example.com</span><br><span class=\"line\">输入 git --version 显示版本号则安装成功</span><br></pre></td></tr></table></figure>\n<h2 id=\"安装-Node-js\"><a href=\"#安装-Node-js\" class=\"headerlink\" title=\"安装 Node.js\"></a><a href=\"(https://nodejs.org/en)\">安装 Node.js</a></h2><p>  输入 node -v 和 npm -v，如果显示版本号则安装成功；</p>\n<h2 id=\"GitHub-仓库创建\"><a href=\"#GitHub-仓库创建\" class=\"headerlink\" title=\"GitHub 仓库创建\"></a><a href=\"(https://github.com)\">GitHub 仓库创建</a></h2><ol>\n<li>创建仓库，命名为 “GitHub Username”.github.io; 注意 GitHub Username 必须为 GitHub 的用户名</li>\n<li>建好之后，该仓库默认有个分支 master (用来存放生成的静态网页), 再创建一个分支命名为 hexo (用来存放生成网站的原始文件)，并将 hexo 分支设置为 默认分支</li>\n<li>使用 <code>git clone git@github.com:username/username.github.io.git</code> 拷贝仓库</li>\n<li>使用 Git bash 进入本地仓库 username.github.io.git(此时分支应为 hexo )， 依次执行 <code>npm install hexo</code>,<code>hexo init</code>,<code>npm install</code>,<code>npm install hexo-deployer-git</code></li>\n<li><p>修改 <code>_congig.yml</code> 的 deploy 参数，分支应为 master ,表示生成的静态网页文件将被推送到 master 分支上；</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deploy:</span><br><span class=\"line\"> type: git</span><br><span class=\"line\"> repo: https://github.com/username/username.github.io.git</span><br><span class=\"line\"> branch: master</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>执行 <code>git add .</code>,<code>git commit -m &quot;提交信息&quot;</code>,<code>git push origin hexo</code></p>\n</li>\n<li>执行 <code>hexo g -d</code> 将生成的网站部署到 GitHub 上；</li>\n</ol>\n<h2 id=\"平时维护\"><a href=\"#平时维护\" class=\"headerlink\" title=\"平时维护\"></a>平时维护</h2><ol>\n<li>本地添加博客或修改主题后，执行 <code>git add .</code>,<code>git commit -m &quot;提交信息&quot;</code>,<code>git push origin hexo</code>将修改推送到远程分支 hexo 上；</li>\n<li>使用 hexo g 生成静态文件， hexo s 开启服务器预览 ，浏览器输入 <a href=\"http://localhost:4000\" target=\"_blank\" rel=\"noopener\">http://localhost:4000</a> 即可预览；使用 hexo d 将生成的静态文件部署到 master 分支上；</li>\n</ol>\n<h2 id=\"多机维护\"><a href=\"#多机维护\" class=\"headerlink\" title=\"多机维护\"></a>多机维护</h2><ol>\n<li>在另一台电脑上，将未安装的软件先安装，之后执行 <code>GitHub 仓库创建</code> 的  2，3步（第三步不需要执行 hexo init 命令）</li>\n</ol>\n<h2 id=\"遇到的问题\"><a href=\"#遇到的问题\" class=\"headerlink\" title=\"遇到的问题\"></a>遇到的问题</h2><ol>\n<li><p><code>Error: bash: /dev/tty: No such device or address</code>， 因为我在 cmd 去进行上述操作，该成 Git bash 之后就没有该问题了；</p>\n</li>\n<li><p><code>hexo command not found</code>, 使用 <code>npm install -g hexo</code> 安装 hexo</p>\n</li>\n<li><p>第二台电脑同步部署完成之后，打开网站空白，原因是主题文件家为空，在 <code>_congif.yml</code> 中指定的主题不存在. 解决方案,重新 clone 一份</p>\n</li>\n</ol>\n<h2 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h2><ol>\n<li>推荐使用 <a href=\"(https://atom.io)\">atom</a> 编辑 md 文件；</li>\n</ol>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"https://www.zhihu.com/question/21193762\" target=\"_blank\" rel=\"noopener\">知乎回答</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"博客搭建-hexo-GitHub-多机同步\"><a href=\"#博客搭建-hexo-GitHub-多机同步\" class=\"headerlink\" title=\"博客搭建 : hexo + GitHub + 多机同步\"></a>博客搭建 : hexo + GitHub + 多机同步</h1><p>记录 <a href=\"(https://hexo.io/zh-cn/docs/index.html)\">hexo</a> 博客搭建及如何实现多机同步；</p>\n<h2 id=\"安装-Git\"><a href=\"#安装-Git\" class=\"headerlink\" title=\"安装 Git\"></a><a href=\"(https://www.git-scm.com/download)\">安装 Git</a></h2><p>安装完后，打开 Git bash , 配置用户名和邮箱</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git config --global user.name &quot;William&quot;</span><br><span class=\"line\">$ git config --global user.email William@example.com</span><br><span class=\"line\">输入 git --version 显示版本号则安装成功</span><br></pre></td></tr></table></figure>\n<h2 id=\"安装-Node-js\"><a href=\"#安装-Node-js\" class=\"headerlink\" title=\"安装 Node.js\"></a><a href=\"(https://nodejs.org/en)\">安装 Node.js</a></h2><p>  输入 node -v 和 npm -v，如果显示版本号则安装成功；</p>\n<h2 id=\"GitHub-仓库创建\"><a href=\"#GitHub-仓库创建\" class=\"headerlink\" title=\"GitHub 仓库创建\"></a><a href=\"(https://github.com)\">GitHub 仓库创建</a></h2><ol>\n<li>创建仓库，命名为 “GitHub Username”.github.io; 注意 GitHub Username 必须为 GitHub 的用户名</li>\n<li>建好之后，该仓库默认有个分支 master (用来存放生成的静态网页), 再创建一个分支命名为 hexo (用来存放生成网站的原始文件)，并将 hexo 分支设置为 默认分支</li>\n<li>使用 <code>git clone git@github.com:username/username.github.io.git</code> 拷贝仓库</li>\n<li>使用 Git bash 进入本地仓库 username.github.io.git(此时分支应为 hexo )， 依次执行 <code>npm install hexo</code>,<code>hexo init</code>,<code>npm install</code>,<code>npm install hexo-deployer-git</code></li>\n<li><p>修改 <code>_congig.yml</code> 的 deploy 参数，分支应为 master ,表示生成的静态网页文件将被推送到 master 分支上；</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deploy:</span><br><span class=\"line\"> type: git</span><br><span class=\"line\"> repo: https://github.com/username/username.github.io.git</span><br><span class=\"line\"> branch: master</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>执行 <code>git add .</code>,<code>git commit -m &quot;提交信息&quot;</code>,<code>git push origin hexo</code></p>\n</li>\n<li>执行 <code>hexo g -d</code> 将生成的网站部署到 GitHub 上；</li>\n</ol>\n<h2 id=\"平时维护\"><a href=\"#平时维护\" class=\"headerlink\" title=\"平时维护\"></a>平时维护</h2><ol>\n<li>本地添加博客或修改主题后，执行 <code>git add .</code>,<code>git commit -m &quot;提交信息&quot;</code>,<code>git push origin hexo</code>将修改推送到远程分支 hexo 上；</li>\n<li>使用 hexo g 生成静态文件， hexo s 开启服务器预览 ，浏览器输入 <a href=\"http://localhost:4000\" target=\"_blank\" rel=\"noopener\">http://localhost:4000</a> 即可预览；使用 hexo d 将生成的静态文件部署到 master 分支上；</li>\n</ol>\n<h2 id=\"多机维护\"><a href=\"#多机维护\" class=\"headerlink\" title=\"多机维护\"></a>多机维护</h2><ol>\n<li>在另一台电脑上，将未安装的软件先安装，之后执行 <code>GitHub 仓库创建</code> 的  2，3步（第三步不需要执行 hexo init 命令）</li>\n</ol>\n<h2 id=\"遇到的问题\"><a href=\"#遇到的问题\" class=\"headerlink\" title=\"遇到的问题\"></a>遇到的问题</h2><ol>\n<li><p><code>Error: bash: /dev/tty: No such device or address</code>， 因为我在 cmd 去进行上述操作，该成 Git bash 之后就没有该问题了；</p>\n</li>\n<li><p><code>hexo command not found</code>, 使用 <code>npm install -g hexo</code> 安装 hexo</p>\n</li>\n<li><p>第二台电脑同步部署完成之后，打开网站空白，原因是主题文件家为空，在 <code>_congif.yml</code> 中指定的主题不存在. 解决方案,重新 clone 一份</p>\n</li>\n</ol>\n<h2 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h2><ol>\n<li>推荐使用 <a href=\"(https://atom.io)\">atom</a> 编辑 md 文件；</li>\n</ol>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"https://www.zhihu.com/question/21193762\" target=\"_blank\" rel=\"noopener\">知乎回答</a></p>\n"},{"title":"译-Testing UI for a Single App","date":"2017-06-19T05:15:51.000Z","directory":null,"_content":"\n # 配置 Espresso\n\n  添加依赖\n\n```\n  dependencies {\n    // Other dependencies ...\n    androidTestCompile 'com.android.support.test.espresso:espresso-core:2.2.2'\n}\n```\n\n 关闭系统动画，否则可能会导致非预期的结果；在开发者选项中关闭：\n\n * 窗口动画缩放\n\n * 过渡动画缩放\n\n * 动画程序时长缩放\n\n# 创建 Espresso 测试类\n\n 按照如下步骤创建\n\n 1. 使用Espresso.onView()在Activity中找到想要测试的UI控件，使用onData() 在AdapterView()中找；\n\n 2. 通过调用 ViewInteraction.perform(action) 或者 DataInteraction.perform(aciton) 并将用户操作\n 作为参数传递,执行模拟用户操作；可以对同意个空间同时执行多个操作，将操作用逗号分隔即可\n\n 3. 重复上面的操作，在目标app的多个界面模拟用户操作流；\n\n 4. 在执行用户操作后，使用 ViewAssertions 中的方法检查 UI 是否反应了预期的状态或行为。\n\n 下面的代码展示了在一段测试代码中的通用模板：\n\n ```\n onView(ViewMatcher)\n   .perform(ViewAction)\n   .check(ViewAssertion);\n\n onView(withId(R.id.my_view))            // withId(R.id.my_view) is a ViewMatcher\n        .perform(click())               // click() is a ViewAction\n        .check(matches(isDisplayed())); // matches(isDisplayed()) is a ViewAssertion        \n ```\n\n # 使用 ActivityTestRule\n\n  下面的代码段描述了如何创建一个基于Junit4风格的 UI 测试，并使用 `ActivityTestRule` 去减少\n   模板代码的编写； 通过使用 `ActivityTestRule` ，测试框架将会在由 @Test 注解的任何测试方法和\n   由 @Before 注解的任何方法前启动对应的 `Activity`,在执行完所有的 测试方法和有 @After 注解的\n  方法后，将会关闭它；\n\n```\npackage com.example.android.testing.espresso.BasicSample;\n\nimport org.junit.Before;\nimport org.junit.Rule;\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\n\nimport android.support.test.rule.ActivityTestRule;\nimport android.support.test.runner.AndroidJUnit4;\n...\n\n@RunWith(AndroidJUnit4.class)\n@LargeTest\npublic class ChangeTextBehaviorTest {\n\n    private String mStringToBetyped;\n\n    @Rule\n    public ActivityTestRule<MainActivity> mActivityRule = new ActivityTestRule<>(\n            MainActivity.class);\n\n    @Before\n    public void initValidString() {\n        // Specify a valid string.\n        mStringToBetyped = \"Espresso\";\n    }\n\n    @Test\n    public void changeText_sameActivity() {\n        // Type text and then press the button.\n        onView(withId(R.id.editTextUserInput))\n                .perform(typeText(mStringToBetyped), closeSoftKeyboard());\n        onView(withId(R.id.changeTextBt)).perform(click());\n\n        // Check that the text was changed.\n        onView(withId(R.id.textToBeChanged))\n                .check(matches(withText(mStringToBetyped)));\n    }\n}\n\n```\n\n![](https://google.github.io/android-testing-support-library/assets/espresso-cheat-sheet-2.1.0.png)","source":"_posts/译-Building Instrumented Unit Test.md","raw":"---\ntitle: 译-Testing UI for a Single App\ndate: 2017-06-19 13:15:51\ntags: 单元测试 Android\ncategories: 翻译\ndirectory:\n---\n\n # 配置 Espresso\n\n  添加依赖\n\n```\n  dependencies {\n    // Other dependencies ...\n    androidTestCompile 'com.android.support.test.espresso:espresso-core:2.2.2'\n}\n```\n\n 关闭系统动画，否则可能会导致非预期的结果；在开发者选项中关闭：\n\n * 窗口动画缩放\n\n * 过渡动画缩放\n\n * 动画程序时长缩放\n\n# 创建 Espresso 测试类\n\n 按照如下步骤创建\n\n 1. 使用Espresso.onView()在Activity中找到想要测试的UI控件，使用onData() 在AdapterView()中找；\n\n 2. 通过调用 ViewInteraction.perform(action) 或者 DataInteraction.perform(aciton) 并将用户操作\n 作为参数传递,执行模拟用户操作；可以对同意个空间同时执行多个操作，将操作用逗号分隔即可\n\n 3. 重复上面的操作，在目标app的多个界面模拟用户操作流；\n\n 4. 在执行用户操作后，使用 ViewAssertions 中的方法检查 UI 是否反应了预期的状态或行为。\n\n 下面的代码展示了在一段测试代码中的通用模板：\n\n ```\n onView(ViewMatcher)\n   .perform(ViewAction)\n   .check(ViewAssertion);\n\n onView(withId(R.id.my_view))            // withId(R.id.my_view) is a ViewMatcher\n        .perform(click())               // click() is a ViewAction\n        .check(matches(isDisplayed())); // matches(isDisplayed()) is a ViewAssertion        \n ```\n\n # 使用 ActivityTestRule\n\n  下面的代码段描述了如何创建一个基于Junit4风格的 UI 测试，并使用 `ActivityTestRule` 去减少\n   模板代码的编写； 通过使用 `ActivityTestRule` ，测试框架将会在由 @Test 注解的任何测试方法和\n   由 @Before 注解的任何方法前启动对应的 `Activity`,在执行完所有的 测试方法和有 @After 注解的\n  方法后，将会关闭它；\n\n```\npackage com.example.android.testing.espresso.BasicSample;\n\nimport org.junit.Before;\nimport org.junit.Rule;\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\n\nimport android.support.test.rule.ActivityTestRule;\nimport android.support.test.runner.AndroidJUnit4;\n...\n\n@RunWith(AndroidJUnit4.class)\n@LargeTest\npublic class ChangeTextBehaviorTest {\n\n    private String mStringToBetyped;\n\n    @Rule\n    public ActivityTestRule<MainActivity> mActivityRule = new ActivityTestRule<>(\n            MainActivity.class);\n\n    @Before\n    public void initValidString() {\n        // Specify a valid string.\n        mStringToBetyped = \"Espresso\";\n    }\n\n    @Test\n    public void changeText_sameActivity() {\n        // Type text and then press the button.\n        onView(withId(R.id.editTextUserInput))\n                .perform(typeText(mStringToBetyped), closeSoftKeyboard());\n        onView(withId(R.id.changeTextBt)).perform(click());\n\n        // Check that the text was changed.\n        onView(withId(R.id.textToBeChanged))\n                .check(matches(withText(mStringToBetyped)));\n    }\n}\n\n```\n\n![](https://google.github.io/android-testing-support-library/assets/espresso-cheat-sheet-2.1.0.png)","slug":"译-Building Instrumented Unit Test","published":1,"updated":"2021-05-26T10:07:16.992Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckp5bxa930006ya3onkytbwfz","content":"<h1 id=\"配置-Espresso\"><a href=\"#配置-Espresso\" class=\"headerlink\" title=\"配置 Espresso\"></a>配置 Espresso</h1><p>  添加依赖</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  dependencies &#123;</span><br><span class=\"line\">    // Other dependencies ...</span><br><span class=\"line\">    androidTestCompile &apos;com.android.support.test.espresso:espresso-core:2.2.2&apos;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p> 关闭系统动画，否则可能会导致非预期的结果；在开发者选项中关闭：</p>\n<ul>\n<li><p>窗口动画缩放</p>\n</li>\n<li><p>过渡动画缩放</p>\n</li>\n<li><p>动画程序时长缩放</p>\n</li>\n</ul>\n<h1 id=\"创建-Espresso-测试类\"><a href=\"#创建-Espresso-测试类\" class=\"headerlink\" title=\"创建 Espresso 测试类\"></a>创建 Espresso 测试类</h1><p> 按照如下步骤创建</p>\n<ol>\n<li><p>使用Espresso.onView()在Activity中找到想要测试的UI控件，使用onData() 在AdapterView()中找；</p>\n</li>\n<li><p>通过调用 ViewInteraction.perform(action) 或者 DataInteraction.perform(aciton) 并将用户操作<br>作为参数传递,执行模拟用户操作；可以对同意个空间同时执行多个操作，将操作用逗号分隔即可</p>\n</li>\n<li><p>重复上面的操作，在目标app的多个界面模拟用户操作流；</p>\n</li>\n<li><p>在执行用户操作后，使用 ViewAssertions 中的方法检查 UI 是否反应了预期的状态或行为。</p>\n<p>下面的代码展示了在一段测试代码中的通用模板：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">onView(ViewMatcher)</span><br><span class=\"line\">  .perform(ViewAction)</span><br><span class=\"line\">  .check(ViewAssertion);</span><br><span class=\"line\"></span><br><span class=\"line\">onView(withId(R.id.my_view))            // withId(R.id.my_view) is a ViewMatcher</span><br><span class=\"line\">       .perform(click())               // click() is a ViewAction</span><br><span class=\"line\">       .check(matches(isDisplayed())); // matches(isDisplayed()) is a ViewAssertion</span><br></pre></td></tr></table></figure>\n<h1 id=\"使用-ActivityTestRule\"><a href=\"#使用-ActivityTestRule\" class=\"headerlink\" title=\"使用 ActivityTestRule\"></a>使用 ActivityTestRule</h1><p>下面的代码段描述了如何创建一个基于Junit4风格的 UI 测试，并使用 <code>ActivityTestRule</code> 去减少<br>模板代码的编写； 通过使用 <code>ActivityTestRule</code> ，测试框架将会在由 @Test 注解的任何测试方法和<br>由 @Before 注解的任何方法前启动对应的 <code>Activity</code>,在执行完所有的 测试方法和有 @After 注解的<br>方法后，将会关闭它；</p>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.example.android.testing.espresso.BasicSample;</span><br><span class=\"line\"></span><br><span class=\"line\">import org.junit.Before;</span><br><span class=\"line\">import org.junit.Rule;</span><br><span class=\"line\">import org.junit.Test;</span><br><span class=\"line\">import org.junit.runner.RunWith;</span><br><span class=\"line\"></span><br><span class=\"line\">import android.support.test.rule.ActivityTestRule;</span><br><span class=\"line\">import android.support.test.runner.AndroidJUnit4;</span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\">@RunWith(AndroidJUnit4.class)</span><br><span class=\"line\">@LargeTest</span><br><span class=\"line\">public class ChangeTextBehaviorTest &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    private String mStringToBetyped;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Rule</span><br><span class=\"line\">    public ActivityTestRule&lt;MainActivity&gt; mActivityRule = new ActivityTestRule&lt;&gt;(</span><br><span class=\"line\">            MainActivity.class);</span><br><span class=\"line\"></span><br><span class=\"line\">    @Before</span><br><span class=\"line\">    public void initValidString() &#123;</span><br><span class=\"line\">        // Specify a valid string.</span><br><span class=\"line\">        mStringToBetyped = &quot;Espresso&quot;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    public void changeText_sameActivity() &#123;</span><br><span class=\"line\">        // Type text and then press the button.</span><br><span class=\"line\">        onView(withId(R.id.editTextUserInput))</span><br><span class=\"line\">                .perform(typeText(mStringToBetyped), closeSoftKeyboard());</span><br><span class=\"line\">        onView(withId(R.id.changeTextBt)).perform(click());</span><br><span class=\"line\"></span><br><span class=\"line\">        // Check that the text was changed.</span><br><span class=\"line\">        onView(withId(R.id.textToBeChanged))</span><br><span class=\"line\">                .check(matches(withText(mStringToBetyped)));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://google.github.io/android-testing-support-library/assets/espresso-cheat-sheet-2.1.0.png\" alt></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"配置-Espresso\"><a href=\"#配置-Espresso\" class=\"headerlink\" title=\"配置 Espresso\"></a>配置 Espresso</h1><p>  添加依赖</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  dependencies &#123;</span><br><span class=\"line\">    // Other dependencies ...</span><br><span class=\"line\">    androidTestCompile &apos;com.android.support.test.espresso:espresso-core:2.2.2&apos;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p> 关闭系统动画，否则可能会导致非预期的结果；在开发者选项中关闭：</p>\n<ul>\n<li><p>窗口动画缩放</p>\n</li>\n<li><p>过渡动画缩放</p>\n</li>\n<li><p>动画程序时长缩放</p>\n</li>\n</ul>\n<h1 id=\"创建-Espresso-测试类\"><a href=\"#创建-Espresso-测试类\" class=\"headerlink\" title=\"创建 Espresso 测试类\"></a>创建 Espresso 测试类</h1><p> 按照如下步骤创建</p>\n<ol>\n<li><p>使用Espresso.onView()在Activity中找到想要测试的UI控件，使用onData() 在AdapterView()中找；</p>\n</li>\n<li><p>通过调用 ViewInteraction.perform(action) 或者 DataInteraction.perform(aciton) 并将用户操作<br>作为参数传递,执行模拟用户操作；可以对同意个空间同时执行多个操作，将操作用逗号分隔即可</p>\n</li>\n<li><p>重复上面的操作，在目标app的多个界面模拟用户操作流；</p>\n</li>\n<li><p>在执行用户操作后，使用 ViewAssertions 中的方法检查 UI 是否反应了预期的状态或行为。</p>\n<p>下面的代码展示了在一段测试代码中的通用模板：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">onView(ViewMatcher)</span><br><span class=\"line\">  .perform(ViewAction)</span><br><span class=\"line\">  .check(ViewAssertion);</span><br><span class=\"line\"></span><br><span class=\"line\">onView(withId(R.id.my_view))            // withId(R.id.my_view) is a ViewMatcher</span><br><span class=\"line\">       .perform(click())               // click() is a ViewAction</span><br><span class=\"line\">       .check(matches(isDisplayed())); // matches(isDisplayed()) is a ViewAssertion</span><br></pre></td></tr></table></figure>\n<h1 id=\"使用-ActivityTestRule\"><a href=\"#使用-ActivityTestRule\" class=\"headerlink\" title=\"使用 ActivityTestRule\"></a>使用 ActivityTestRule</h1><p>下面的代码段描述了如何创建一个基于Junit4风格的 UI 测试，并使用 <code>ActivityTestRule</code> 去减少<br>模板代码的编写； 通过使用 <code>ActivityTestRule</code> ，测试框架将会在由 @Test 注解的任何测试方法和<br>由 @Before 注解的任何方法前启动对应的 <code>Activity</code>,在执行完所有的 测试方法和有 @After 注解的<br>方法后，将会关闭它；</p>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.example.android.testing.espresso.BasicSample;</span><br><span class=\"line\"></span><br><span class=\"line\">import org.junit.Before;</span><br><span class=\"line\">import org.junit.Rule;</span><br><span class=\"line\">import org.junit.Test;</span><br><span class=\"line\">import org.junit.runner.RunWith;</span><br><span class=\"line\"></span><br><span class=\"line\">import android.support.test.rule.ActivityTestRule;</span><br><span class=\"line\">import android.support.test.runner.AndroidJUnit4;</span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\">@RunWith(AndroidJUnit4.class)</span><br><span class=\"line\">@LargeTest</span><br><span class=\"line\">public class ChangeTextBehaviorTest &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    private String mStringToBetyped;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Rule</span><br><span class=\"line\">    public ActivityTestRule&lt;MainActivity&gt; mActivityRule = new ActivityTestRule&lt;&gt;(</span><br><span class=\"line\">            MainActivity.class);</span><br><span class=\"line\"></span><br><span class=\"line\">    @Before</span><br><span class=\"line\">    public void initValidString() &#123;</span><br><span class=\"line\">        // Specify a valid string.</span><br><span class=\"line\">        mStringToBetyped = &quot;Espresso&quot;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    public void changeText_sameActivity() &#123;</span><br><span class=\"line\">        // Type text and then press the button.</span><br><span class=\"line\">        onView(withId(R.id.editTextUserInput))</span><br><span class=\"line\">                .perform(typeText(mStringToBetyped), closeSoftKeyboard());</span><br><span class=\"line\">        onView(withId(R.id.changeTextBt)).perform(click());</span><br><span class=\"line\"></span><br><span class=\"line\">        // Check that the text was changed.</span><br><span class=\"line\">        onView(withId(R.id.textToBeChanged))</span><br><span class=\"line\">                .check(matches(withText(mStringToBetyped)));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://google.github.io/android-testing-support-library/assets/espresso-cheat-sheet-2.1.0.png\" alt></p>\n"},{"title":"译-Building Local Unit Test","date":"2017-06-19T05:15:51.000Z","directory":null,"_content":"\n# 创建本地单元测试\n\n## 配置单元测试环境\n 在对应的 build.gradle　文件中添加依赖\n```\ndependencies {\n   // Required -- JUnit 4 framework\n   testCompile 'junit:junit:4.12'\n   // Optional -- Mockito framework\n   testCompile 'org.mockito:mockito-core:1.10.19'\n}\n```\n## 创建一个单元测试类\n  Android 中的单元测试是 Junit4 框架的，我们不需要让我们的类继承子 TestCase类，也不需要让方法名一 test 开头，也不会使用到 junit.framework 中的任何类；\n\n  创建一个基于 junit4 的类只需要创建一个包含若干测试方法的 java 类就可以，测试方法使用 @Test 标注就可以，\n\n  下面的例子展示了如何实现一个本地单元测试类，测试方法验证了程序中的 isValidEmail() 方法是否符合返回的结果；\n```\nimport org.junit.Test;\nimport java.util.regex.Pattern;\nimport static org.junit.Assert.assertFalse;\nimport static org.junit.Assert.assertTrue;\n\npublic class EmailValidatorTest {\n\n    @Test\n    public void emailValidator_CorrectEmailSimple_ReturnsTrue() {\n        assertThat(EmailValidator.isValidEmail(\"name@email.com\"), is(true));\n    }\n    ...\n}\n```\n 为了使测试代码更具可读性，我们可以使用 Hamcrest Matchers(匹配结果的类，is(),equalTo()方法)匹配返回结果与预期的结果\n\n # 模拟 Android 依赖\n\n  默认情况下，gradle 插件会根据修改版本的 andorid.jar 执行本地单元测试，但是这个jar包中的方法不包含任何具体实现，在单元测试中调用android 的代码会抛出异常；这是为了保证在测试代码的时候不会被特定的android 平台干扰；\n\n  我们可以使用一个 mock 框架来去掉特定的依赖项，来保证我们的单元测试和依赖项按找特定方式交互。通过 mock 对象来代替 Android 的依赖项； 在 mockito 的支持下，我们可以模拟对象让他在调用的时候返回任意值；\n\n  给项目中添加Mock对象用于单元测试需要按照以下步骤来：\n\n  1. 在 build.gradle 中添加依赖，像配置环境一节描述的一样\n\n  2. 在定义的单元测试类之前添加 @RunWith(MockitoJunitRunner.class) 注解，这个注解会让 mockito test runner 验证 mockito 的用法是否正确以及简化模拟对象的初始化；\n\n  3. 为了创建一个模拟对象，需要在变量声明之前添加 @mock 注解；\n\n  4. 为了模拟依赖项的行为，我们可以使用 when(condition).thenReturn(value) 方法调用链去指定一个条件并在条件满足的时候\n    返回想要的值；\n\n  下面的例子展示了使用一个 mock 的 Context 对象：\n\n\n```\nimport static org.hamcrest.MatcherAssert.assertThat;\nimport static org.hamcrest.CoreMatchers.*;\nimport static org.mockito.Mockito.*;\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.mockito.Mock;\nimport org.mockito.runners.MockitoJUnitRunner;\nimport android.content.SharedPreferences;\n\n@RunWith(MockitoJUnitRunner.class)\npublic class UnitTestSample {\n\n    private static final String FAKE_STRING = \"HELLO WORLD\";\n\n    @Mock\n    Context mMockContext;\n\n    @Test\n    public void readStringFromContext_LocalizedString() {\n        // Given a mocked Context injected into the object under test...\n        when(mMockContext.getString(R.string.hello_word))\n                .thenReturn(FAKE_STRING);\n        ClassUnderTest myObjectUnderTest = new ClassUnderTest(mMockContext);\n\n        // ...when the string is returned from the object under test...\n        String result = myObjectUnderTest.getHelloWorldString();\n\n        // ...then the result should be the expected one.\n        assertThat(result, is(FAKE_STRING));\n    }\n}\n```\n\n## Error:\"Method...not mocked\"\n\n  如果你运行的测试代码中调用 android sdk 中的 api,但是你英没有 mock 时,运行会报告异常说这个方法没有被mock,这是因为用于单元测试的 andoird.jar 方法都是空实现（这些API都是由具体的设备上Android 系统镜像提供的）；\n\n  同样的，所有的方法都会抛出异常，这是为了保证我们的单元测试不会受到特定Android平台的干扰；\n\n   如果抛出的异常干扰了测试，我们可以通过在工程级别的build.gradle 中添加如下片段，让所有的方法都返回默认值 null 或 0;\n\n```\nandroid {\n  ...\n  testOptions {\n    unitTests.returnDefaultValues = true\n  }\n}\n```\n\n## 运行单元测试\n\n  按照如下步骤来运行单元测试\n\n  1. 确保已经使用gradle Sync Project 同步过工程;\n\n  2. 按以下任意一种运行测试\n\n      * 运行单个测试，打开工程试图，右击一个单元测试，然后点击 run 按钮\n\n      * 运行一个类的所有单元测试，右击该单元测试类点击 run 按钮\n\n      * 运行一个目录中的所有单元测试，右击该目录，然后点及 run ;\n\n\n  Android gradle 的插件将会编译位于默认目录（src/test/java）下的本地单元测试代码，构建一个 测试 app,使用默认的测试运行类来执行，android stuidio 将会在 Run 窗口中展示结果；","source":"_posts/译-Building Local Unit Test.md","raw":"---\ntitle: 译-Building Local Unit Test\ndate: 2017-06-19 13:15:51\ntags: 单元测试 Android\ncategories: 翻译\ndirectory:\n---\n\n# 创建本地单元测试\n\n## 配置单元测试环境\n 在对应的 build.gradle　文件中添加依赖\n```\ndependencies {\n   // Required -- JUnit 4 framework\n   testCompile 'junit:junit:4.12'\n   // Optional -- Mockito framework\n   testCompile 'org.mockito:mockito-core:1.10.19'\n}\n```\n## 创建一个单元测试类\n  Android 中的单元测试是 Junit4 框架的，我们不需要让我们的类继承子 TestCase类，也不需要让方法名一 test 开头，也不会使用到 junit.framework 中的任何类；\n\n  创建一个基于 junit4 的类只需要创建一个包含若干测试方法的 java 类就可以，测试方法使用 @Test 标注就可以，\n\n  下面的例子展示了如何实现一个本地单元测试类，测试方法验证了程序中的 isValidEmail() 方法是否符合返回的结果；\n```\nimport org.junit.Test;\nimport java.util.regex.Pattern;\nimport static org.junit.Assert.assertFalse;\nimport static org.junit.Assert.assertTrue;\n\npublic class EmailValidatorTest {\n\n    @Test\n    public void emailValidator_CorrectEmailSimple_ReturnsTrue() {\n        assertThat(EmailValidator.isValidEmail(\"name@email.com\"), is(true));\n    }\n    ...\n}\n```\n 为了使测试代码更具可读性，我们可以使用 Hamcrest Matchers(匹配结果的类，is(),equalTo()方法)匹配返回结果与预期的结果\n\n # 模拟 Android 依赖\n\n  默认情况下，gradle 插件会根据修改版本的 andorid.jar 执行本地单元测试，但是这个jar包中的方法不包含任何具体实现，在单元测试中调用android 的代码会抛出异常；这是为了保证在测试代码的时候不会被特定的android 平台干扰；\n\n  我们可以使用一个 mock 框架来去掉特定的依赖项，来保证我们的单元测试和依赖项按找特定方式交互。通过 mock 对象来代替 Android 的依赖项； 在 mockito 的支持下，我们可以模拟对象让他在调用的时候返回任意值；\n\n  给项目中添加Mock对象用于单元测试需要按照以下步骤来：\n\n  1. 在 build.gradle 中添加依赖，像配置环境一节描述的一样\n\n  2. 在定义的单元测试类之前添加 @RunWith(MockitoJunitRunner.class) 注解，这个注解会让 mockito test runner 验证 mockito 的用法是否正确以及简化模拟对象的初始化；\n\n  3. 为了创建一个模拟对象，需要在变量声明之前添加 @mock 注解；\n\n  4. 为了模拟依赖项的行为，我们可以使用 when(condition).thenReturn(value) 方法调用链去指定一个条件并在条件满足的时候\n    返回想要的值；\n\n  下面的例子展示了使用一个 mock 的 Context 对象：\n\n\n```\nimport static org.hamcrest.MatcherAssert.assertThat;\nimport static org.hamcrest.CoreMatchers.*;\nimport static org.mockito.Mockito.*;\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.mockito.Mock;\nimport org.mockito.runners.MockitoJUnitRunner;\nimport android.content.SharedPreferences;\n\n@RunWith(MockitoJUnitRunner.class)\npublic class UnitTestSample {\n\n    private static final String FAKE_STRING = \"HELLO WORLD\";\n\n    @Mock\n    Context mMockContext;\n\n    @Test\n    public void readStringFromContext_LocalizedString() {\n        // Given a mocked Context injected into the object under test...\n        when(mMockContext.getString(R.string.hello_word))\n                .thenReturn(FAKE_STRING);\n        ClassUnderTest myObjectUnderTest = new ClassUnderTest(mMockContext);\n\n        // ...when the string is returned from the object under test...\n        String result = myObjectUnderTest.getHelloWorldString();\n\n        // ...then the result should be the expected one.\n        assertThat(result, is(FAKE_STRING));\n    }\n}\n```\n\n## Error:\"Method...not mocked\"\n\n  如果你运行的测试代码中调用 android sdk 中的 api,但是你英没有 mock 时,运行会报告异常说这个方法没有被mock,这是因为用于单元测试的 andoird.jar 方法都是空实现（这些API都是由具体的设备上Android 系统镜像提供的）；\n\n  同样的，所有的方法都会抛出异常，这是为了保证我们的单元测试不会受到特定Android平台的干扰；\n\n   如果抛出的异常干扰了测试，我们可以通过在工程级别的build.gradle 中添加如下片段，让所有的方法都返回默认值 null 或 0;\n\n```\nandroid {\n  ...\n  testOptions {\n    unitTests.returnDefaultValues = true\n  }\n}\n```\n\n## 运行单元测试\n\n  按照如下步骤来运行单元测试\n\n  1. 确保已经使用gradle Sync Project 同步过工程;\n\n  2. 按以下任意一种运行测试\n\n      * 运行单个测试，打开工程试图，右击一个单元测试，然后点击 run 按钮\n\n      * 运行一个类的所有单元测试，右击该单元测试类点击 run 按钮\n\n      * 运行一个目录中的所有单元测试，右击该目录，然后点及 run ;\n\n\n  Android gradle 的插件将会编译位于默认目录（src/test/java）下的本地单元测试代码，构建一个 测试 app,使用默认的测试运行类来执行，android stuidio 将会在 Run 窗口中展示结果；","slug":"译-Building Local Unit Test","published":1,"updated":"2021-05-26T10:07:22.628Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckp5bxa940007ya3ou989j05k","content":"<h1 id=\"创建本地单元测试\"><a href=\"#创建本地单元测试\" class=\"headerlink\" title=\"创建本地单元测试\"></a>创建本地单元测试</h1><h2 id=\"配置单元测试环境\"><a href=\"#配置单元测试环境\" class=\"headerlink\" title=\"配置单元测试环境\"></a>配置单元测试环境</h2><p> 在对应的 build.gradle　文件中添加依赖<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dependencies &#123;</span><br><span class=\"line\">   // Required -- JUnit 4 framework</span><br><span class=\"line\">   testCompile &apos;junit:junit:4.12&apos;</span><br><span class=\"line\">   // Optional -- Mockito framework</span><br><span class=\"line\">   testCompile &apos;org.mockito:mockito-core:1.10.19&apos;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"创建一个单元测试类\"><a href=\"#创建一个单元测试类\" class=\"headerlink\" title=\"创建一个单元测试类\"></a>创建一个单元测试类</h2><p>  Android 中的单元测试是 Junit4 框架的，我们不需要让我们的类继承子 TestCase类，也不需要让方法名一 test 开头，也不会使用到 junit.framework 中的任何类；</p>\n<p>  创建一个基于 junit4 的类只需要创建一个包含若干测试方法的 java 类就可以，测试方法使用 @Test 标注就可以，</p>\n<p>  下面的例子展示了如何实现一个本地单元测试类，测试方法验证了程序中的 isValidEmail() 方法是否符合返回的结果；<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import org.junit.Test;</span><br><span class=\"line\">import java.util.regex.Pattern;</span><br><span class=\"line\">import static org.junit.Assert.assertFalse;</span><br><span class=\"line\">import static org.junit.Assert.assertTrue;</span><br><span class=\"line\"></span><br><span class=\"line\">public class EmailValidatorTest &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    public void emailValidator_CorrectEmailSimple_ReturnsTrue() &#123;</span><br><span class=\"line\">        assertThat(EmailValidator.isValidEmail(&quot;name@email.com&quot;), is(true));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p> 为了使测试代码更具可读性，我们可以使用 Hamcrest Matchers(匹配结果的类，is(),equalTo()方法)匹配返回结果与预期的结果</p>\n<h1 id=\"模拟-Android-依赖\"><a href=\"#模拟-Android-依赖\" class=\"headerlink\" title=\"模拟 Android 依赖\"></a>模拟 Android 依赖</h1><p>  默认情况下，gradle 插件会根据修改版本的 andorid.jar 执行本地单元测试，但是这个jar包中的方法不包含任何具体实现，在单元测试中调用android 的代码会抛出异常；这是为了保证在测试代码的时候不会被特定的android 平台干扰；</p>\n<p>  我们可以使用一个 mock 框架来去掉特定的依赖项，来保证我们的单元测试和依赖项按找特定方式交互。通过 mock 对象来代替 Android 的依赖项； 在 mockito 的支持下，我们可以模拟对象让他在调用的时候返回任意值；</p>\n<p>  给项目中添加Mock对象用于单元测试需要按照以下步骤来：</p>\n<ol>\n<li><p>在 build.gradle 中添加依赖，像配置环境一节描述的一样</p>\n</li>\n<li><p>在定义的单元测试类之前添加 @RunWith(MockitoJunitRunner.class) 注解，这个注解会让 mockito test runner 验证 mockito 的用法是否正确以及简化模拟对象的初始化；</p>\n</li>\n<li><p>为了创建一个模拟对象，需要在变量声明之前添加 @mock 注解；</p>\n</li>\n<li><p>为了模拟依赖项的行为，我们可以使用 when(condition).thenReturn(value) 方法调用链去指定一个条件并在条件满足的时候<br>返回想要的值；</p>\n<p>下面的例子展示了使用一个 mock 的 Context 对象：</p>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import static org.hamcrest.MatcherAssert.assertThat;</span><br><span class=\"line\">import static org.hamcrest.CoreMatchers.*;</span><br><span class=\"line\">import static org.mockito.Mockito.*;</span><br><span class=\"line\">import org.junit.Test;</span><br><span class=\"line\">import org.junit.runner.RunWith;</span><br><span class=\"line\">import org.mockito.Mock;</span><br><span class=\"line\">import org.mockito.runners.MockitoJUnitRunner;</span><br><span class=\"line\">import android.content.SharedPreferences;</span><br><span class=\"line\"></span><br><span class=\"line\">@RunWith(MockitoJUnitRunner.class)</span><br><span class=\"line\">public class UnitTestSample &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    private static final String FAKE_STRING = &quot;HELLO WORLD&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Mock</span><br><span class=\"line\">    Context mMockContext;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    public void readStringFromContext_LocalizedString() &#123;</span><br><span class=\"line\">        // Given a mocked Context injected into the object under test...</span><br><span class=\"line\">        when(mMockContext.getString(R.string.hello_word))</span><br><span class=\"line\">                .thenReturn(FAKE_STRING);</span><br><span class=\"line\">        ClassUnderTest myObjectUnderTest = new ClassUnderTest(mMockContext);</span><br><span class=\"line\"></span><br><span class=\"line\">        // ...when the string is returned from the object under test...</span><br><span class=\"line\">        String result = myObjectUnderTest.getHelloWorldString();</span><br><span class=\"line\"></span><br><span class=\"line\">        // ...then the result should be the expected one.</span><br><span class=\"line\">        assertThat(result, is(FAKE_STRING));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Error-”Method…not-mocked”\"><a href=\"#Error-”Method…not-mocked”\" class=\"headerlink\" title=\"Error:”Method…not mocked”\"></a>Error:”Method…not mocked”</h2><p>  如果你运行的测试代码中调用 android sdk 中的 api,但是你英没有 mock 时,运行会报告异常说这个方法没有被mock,这是因为用于单元测试的 andoird.jar 方法都是空实现（这些API都是由具体的设备上Android 系统镜像提供的）；</p>\n<p>  同样的，所有的方法都会抛出异常，这是为了保证我们的单元测试不会受到特定Android平台的干扰；</p>\n<p>   如果抛出的异常干扰了测试，我们可以通过在工程级别的build.gradle 中添加如下片段，让所有的方法都返回默认值 null 或 0;</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">android &#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  testOptions &#123;</span><br><span class=\"line\">    unitTests.returnDefaultValues = true</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"运行单元测试\"><a href=\"#运行单元测试\" class=\"headerlink\" title=\"运行单元测试\"></a>运行单元测试</h2><p>  按照如下步骤来运行单元测试</p>\n<ol>\n<li><p>确保已经使用gradle Sync Project 同步过工程;</p>\n</li>\n<li><p>按以下任意一种运行测试</p>\n<ul>\n<li><p>运行单个测试，打开工程试图，右击一个单元测试，然后点击 run 按钮</p>\n</li>\n<li><p>运行一个类的所有单元测试，右击该单元测试类点击 run 按钮</p>\n</li>\n<li><p>运行一个目录中的所有单元测试，右击该目录，然后点及 run ;</p>\n</li>\n</ul>\n</li>\n</ol>\n<p>  Android gradle 的插件将会编译位于默认目录（src/test/java）下的本地单元测试代码，构建一个 测试 app,使用默认的测试运行类来执行，android stuidio 将会在 Run 窗口中展示结果；</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"创建本地单元测试\"><a href=\"#创建本地单元测试\" class=\"headerlink\" title=\"创建本地单元测试\"></a>创建本地单元测试</h1><h2 id=\"配置单元测试环境\"><a href=\"#配置单元测试环境\" class=\"headerlink\" title=\"配置单元测试环境\"></a>配置单元测试环境</h2><p> 在对应的 build.gradle　文件中添加依赖<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dependencies &#123;</span><br><span class=\"line\">   // Required -- JUnit 4 framework</span><br><span class=\"line\">   testCompile &apos;junit:junit:4.12&apos;</span><br><span class=\"line\">   // Optional -- Mockito framework</span><br><span class=\"line\">   testCompile &apos;org.mockito:mockito-core:1.10.19&apos;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"创建一个单元测试类\"><a href=\"#创建一个单元测试类\" class=\"headerlink\" title=\"创建一个单元测试类\"></a>创建一个单元测试类</h2><p>  Android 中的单元测试是 Junit4 框架的，我们不需要让我们的类继承子 TestCase类，也不需要让方法名一 test 开头，也不会使用到 junit.framework 中的任何类；</p>\n<p>  创建一个基于 junit4 的类只需要创建一个包含若干测试方法的 java 类就可以，测试方法使用 @Test 标注就可以，</p>\n<p>  下面的例子展示了如何实现一个本地单元测试类，测试方法验证了程序中的 isValidEmail() 方法是否符合返回的结果；<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import org.junit.Test;</span><br><span class=\"line\">import java.util.regex.Pattern;</span><br><span class=\"line\">import static org.junit.Assert.assertFalse;</span><br><span class=\"line\">import static org.junit.Assert.assertTrue;</span><br><span class=\"line\"></span><br><span class=\"line\">public class EmailValidatorTest &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    public void emailValidator_CorrectEmailSimple_ReturnsTrue() &#123;</span><br><span class=\"line\">        assertThat(EmailValidator.isValidEmail(&quot;name@email.com&quot;), is(true));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p> 为了使测试代码更具可读性，我们可以使用 Hamcrest Matchers(匹配结果的类，is(),equalTo()方法)匹配返回结果与预期的结果</p>\n<h1 id=\"模拟-Android-依赖\"><a href=\"#模拟-Android-依赖\" class=\"headerlink\" title=\"模拟 Android 依赖\"></a>模拟 Android 依赖</h1><p>  默认情况下，gradle 插件会根据修改版本的 andorid.jar 执行本地单元测试，但是这个jar包中的方法不包含任何具体实现，在单元测试中调用android 的代码会抛出异常；这是为了保证在测试代码的时候不会被特定的android 平台干扰；</p>\n<p>  我们可以使用一个 mock 框架来去掉特定的依赖项，来保证我们的单元测试和依赖项按找特定方式交互。通过 mock 对象来代替 Android 的依赖项； 在 mockito 的支持下，我们可以模拟对象让他在调用的时候返回任意值；</p>\n<p>  给项目中添加Mock对象用于单元测试需要按照以下步骤来：</p>\n<ol>\n<li><p>在 build.gradle 中添加依赖，像配置环境一节描述的一样</p>\n</li>\n<li><p>在定义的单元测试类之前添加 @RunWith(MockitoJunitRunner.class) 注解，这个注解会让 mockito test runner 验证 mockito 的用法是否正确以及简化模拟对象的初始化；</p>\n</li>\n<li><p>为了创建一个模拟对象，需要在变量声明之前添加 @mock 注解；</p>\n</li>\n<li><p>为了模拟依赖项的行为，我们可以使用 when(condition).thenReturn(value) 方法调用链去指定一个条件并在条件满足的时候<br>返回想要的值；</p>\n<p>下面的例子展示了使用一个 mock 的 Context 对象：</p>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import static org.hamcrest.MatcherAssert.assertThat;</span><br><span class=\"line\">import static org.hamcrest.CoreMatchers.*;</span><br><span class=\"line\">import static org.mockito.Mockito.*;</span><br><span class=\"line\">import org.junit.Test;</span><br><span class=\"line\">import org.junit.runner.RunWith;</span><br><span class=\"line\">import org.mockito.Mock;</span><br><span class=\"line\">import org.mockito.runners.MockitoJUnitRunner;</span><br><span class=\"line\">import android.content.SharedPreferences;</span><br><span class=\"line\"></span><br><span class=\"line\">@RunWith(MockitoJUnitRunner.class)</span><br><span class=\"line\">public class UnitTestSample &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    private static final String FAKE_STRING = &quot;HELLO WORLD&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Mock</span><br><span class=\"line\">    Context mMockContext;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Test</span><br><span class=\"line\">    public void readStringFromContext_LocalizedString() &#123;</span><br><span class=\"line\">        // Given a mocked Context injected into the object under test...</span><br><span class=\"line\">        when(mMockContext.getString(R.string.hello_word))</span><br><span class=\"line\">                .thenReturn(FAKE_STRING);</span><br><span class=\"line\">        ClassUnderTest myObjectUnderTest = new ClassUnderTest(mMockContext);</span><br><span class=\"line\"></span><br><span class=\"line\">        // ...when the string is returned from the object under test...</span><br><span class=\"line\">        String result = myObjectUnderTest.getHelloWorldString();</span><br><span class=\"line\"></span><br><span class=\"line\">        // ...then the result should be the expected one.</span><br><span class=\"line\">        assertThat(result, is(FAKE_STRING));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Error-”Method…not-mocked”\"><a href=\"#Error-”Method…not-mocked”\" class=\"headerlink\" title=\"Error:”Method…not mocked”\"></a>Error:”Method…not mocked”</h2><p>  如果你运行的测试代码中调用 android sdk 中的 api,但是你英没有 mock 时,运行会报告异常说这个方法没有被mock,这是因为用于单元测试的 andoird.jar 方法都是空实现（这些API都是由具体的设备上Android 系统镜像提供的）；</p>\n<p>  同样的，所有的方法都会抛出异常，这是为了保证我们的单元测试不会受到特定Android平台的干扰；</p>\n<p>   如果抛出的异常干扰了测试，我们可以通过在工程级别的build.gradle 中添加如下片段，让所有的方法都返回默认值 null 或 0;</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">android &#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  testOptions &#123;</span><br><span class=\"line\">    unitTests.returnDefaultValues = true</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"运行单元测试\"><a href=\"#运行单元测试\" class=\"headerlink\" title=\"运行单元测试\"></a>运行单元测试</h2><p>  按照如下步骤来运行单元测试</p>\n<ol>\n<li><p>确保已经使用gradle Sync Project 同步过工程;</p>\n</li>\n<li><p>按以下任意一种运行测试</p>\n<ul>\n<li><p>运行单个测试，打开工程试图，右击一个单元测试，然后点击 run 按钮</p>\n</li>\n<li><p>运行一个类的所有单元测试，右击该单元测试类点击 run 按钮</p>\n</li>\n<li><p>运行一个目录中的所有单元测试，右击该目录，然后点及 run ;</p>\n</li>\n</ul>\n</li>\n</ol>\n<p>  Android gradle 的插件将会编译位于默认目录（src/test/java）下的本地单元测试代码，构建一个 测试 app,使用默认的测试运行类来执行，android stuidio 将会在 Run 窗口中展示结果；</p>\n"},{"title":"training-Graphics&Animation-Bitmaps-1","date":"2016-04-01T12:08:13.000Z","_content":"\n# Loading large bitmaps efficently\n\n  使用`Bitmap`可以提升UI的交互性，但是使用不当会造成异常`java.lang.OutOfMemory:bitmap size excedds VM budget`;原因如下：  \n1. 移动设备会限制系统资源；系统至少为应用保留`16MB`的内存空间；.[Android Compatibility Definition Document(CDD)](http://source.android.com/compatibility/downloads.html#android-60) <strong>Section 3.7</Strong> Virtual Machine  Compatibility 中规定可以在多种设备下保持应用流畅度的最小运行时内存；应用应该被优化到可以在该最小运行时内存执行；当然，不同的设备会适当的提高这个限制；<br>2. `Bitmap`特别占用内存；例如：Galaxy Nexus 使用2592x1936（五百万像素）照相机；而`Bitmap`的配置为`ARGB_8888`(android2.3以上默认采取该格式，这意味每一个像素需要占用4Bytes)，如果把该图片加载到内存，需要占用`19MB`(2592x1936x4 bytes)的内存；<br>3. app中UI经常需要一次加载多个`Bitmap`，控件`ListView`,`GridView`,`ViewPager`的通常包含多个Bitmap，并且在屏幕的不可见区域仍然有很多Bitmap等着手指一滑把他们加载到可视区域；\n\n\n\n# How\n\n很多时候，图片的分辨率要高于手机屏幕的分辨率，为了匹配显示图片的控件，减少内存的开销，我们需要图片的低分辨率版本；<br>\n### Read Bitmap Dimensions and Type<br>\n[BitmapFactory](http://developer.android.com/intl/zh-cn/reference/android/graphics/BitmapFactory.html):根据不同的图片来源创建`Bitmap`对象，包括文件路径，流，字节数组；根据数据源选择合适的解码方法；使用这些方法构造`Bitmap`对象时需要分配内存；因此很容易导致`OOM`。不同的方法有不同的解码选项，我们需要通过`BitmapFactory.Options`来指定解码选项；例如在解码时，当指定`inJustDecodeBounds`属性为`true`来避免分配内存，这样会为`Bitmap`对象返回`null`，但是可以获得`outWidth`,`outHeight`,`outMimeType`；这个技巧可以让我们提前读取图片的尺寸以及类型从而避免构建`Bitmap`对象时的内存分配;<br>\n`BitmapFactory.Options options = new BitmapFactory.Options()`<br>`options.inJustDecodeBounds = true`<br>`BitmapFactory.decodeResources(getResources, R.id.images, options)`<br>`int imageWidth = options.outWidth`<br>`int imageHeight = options.outHeight`<br>`String imageType = options.outMimeType`<br>测试图 分辨率：5760x3240 类型: .jpg<br>测试结果：outWidth = 5760; outHeight=3240 outMimeType = image/jpeg![](http://img1.gamersky.com/image2010/06/20100626h_246/01.jpg)<br>注意：为了避免OOM，在解码之前应先检查它的尺寸；除非你相信提供给你的尺寸数据符合可用的内存要求；<br>\n### Load a Scaled Down Version to memory<br>\n现在已经知道了图片的尺寸，接下来我们可以考虑决定是要将原图还是将修改后的图加载到内存中；我们要考虑以下几个因素：<br>\n1. 评估加载完整图片耗费的内存；<br>\n2. 加载这张图片时的涉及到的其他内存需求<br>\n3. 加载这张图片的`ImageView`或者其他UI控件的尺寸；<br>\n4. 屏幕的分辨率以及尺寸；<br>例如：不应该把一个分辨率1024x768的图片加载到一个分辨率128x96的`ImageView`中<br>为了得到图片的低分辨率版本，我们需要设置`BitmapFactory.Options`中`inSampleSize`的值；例如图片的分辨率2048x1536，`inSampleSize`为4，那得到的位图的分辨率为512x384(假如我们采取的是ARGB_8888格式)。下面这个方法告诉我们怎么计算sample size：<br>\n\n```java\n\n    public static int calculateInSampleSize (BitmapFactory.Options options,   \n      int reqWidth, int reqHeight) {\n        final int height = options.outHeight;\n        final int width = options.outWidth;\n        int inSampleSize = 1;\n        if (height > reqHeight || width > reqWidth) {\n          final int halfWidth = height /2;\n          final int halfHeight = width /2;\n          while (halfWidth / inSampleSize > reqWidth && halfHeight/inSampleSize> reqHeight) {\n            inSampleSize *=2；\n          }\n        }\n          return inSampleSize;\n      }  \n\n```\n\n注意：inSampleSize最终为2的幂，否则会向下取最靠近的2的幂的值；<br><br>\n获取到inSampleSize之后，下面的方法来获得缩小后的图片的低分辨率版本；\n\n```java\n\tpublic static Bitmap decodeSampledBimapFromResources (Resources res, int resId, int reqWidth, int reqHeight) {\n\t\tBitmapFactory.Options options = new BitmapFactory.Options();\n\t\toptions.inJustDecodeBounds = true;\n\t\tBitmapFactory.decodeResource(res, resId, options);\n\t\toptions.inSampleSize = calculateInSampleSize(options, reqWidth, reqHeight);\n\t\toptions.inJustDecodeBounds = false;\n\t\treturn BitmapFactory.decodeResource(res, resId, options);\n\t}\n```\n\n经过该方法后我们可以将任意大小的图片解码成低分辨率的版本来加载到内存和布局控件中；\n\n\n\n# question\n\n1. [手机分辨率与相机像素的问题](http://mobile.163.com/14/0421/08/9QBDVKM7001117A8_all.html)\n2. 当我将上述图片降低分辨率时，我设置的reqWidth = 200, reqHeight =200, 我得到inSampleSize =16，解码后，得到的outWidth = 1080 outHeight = 606 而不是5760/16=360和3240/16=202   why?\n3. 我将ImageView的layout_width = 200px，layout_height=200px；得到的效果不是方形；why？\n<br>\n\n# Conclusion\n\n 对于高分辨率的图片，为了获得低分辨率的版本，我们应先解码图片的边界，获得图片的尺寸及类型， 然后根据我们希望得到的分辨率获得inSamplseSize,再进行图片的全部解码；","source":"_posts/training-Graphics-Animation-Bitmaps-1.md","raw":"---\ntitle: training-Graphics&Animation-Bitmaps-1\ndate: 2016-04-01 20:08:13\ntags: android\ncategories: 翻译\n---\n\n# Loading large bitmaps efficently\n\n  使用`Bitmap`可以提升UI的交互性，但是使用不当会造成异常`java.lang.OutOfMemory:bitmap size excedds VM budget`;原因如下：  \n1. 移动设备会限制系统资源；系统至少为应用保留`16MB`的内存空间；.[Android Compatibility Definition Document(CDD)](http://source.android.com/compatibility/downloads.html#android-60) <strong>Section 3.7</Strong> Virtual Machine  Compatibility 中规定可以在多种设备下保持应用流畅度的最小运行时内存；应用应该被优化到可以在该最小运行时内存执行；当然，不同的设备会适当的提高这个限制；<br>2. `Bitmap`特别占用内存；例如：Galaxy Nexus 使用2592x1936（五百万像素）照相机；而`Bitmap`的配置为`ARGB_8888`(android2.3以上默认采取该格式，这意味每一个像素需要占用4Bytes)，如果把该图片加载到内存，需要占用`19MB`(2592x1936x4 bytes)的内存；<br>3. app中UI经常需要一次加载多个`Bitmap`，控件`ListView`,`GridView`,`ViewPager`的通常包含多个Bitmap，并且在屏幕的不可见区域仍然有很多Bitmap等着手指一滑把他们加载到可视区域；\n\n\n\n# How\n\n很多时候，图片的分辨率要高于手机屏幕的分辨率，为了匹配显示图片的控件，减少内存的开销，我们需要图片的低分辨率版本；<br>\n### Read Bitmap Dimensions and Type<br>\n[BitmapFactory](http://developer.android.com/intl/zh-cn/reference/android/graphics/BitmapFactory.html):根据不同的图片来源创建`Bitmap`对象，包括文件路径，流，字节数组；根据数据源选择合适的解码方法；使用这些方法构造`Bitmap`对象时需要分配内存；因此很容易导致`OOM`。不同的方法有不同的解码选项，我们需要通过`BitmapFactory.Options`来指定解码选项；例如在解码时，当指定`inJustDecodeBounds`属性为`true`来避免分配内存，这样会为`Bitmap`对象返回`null`，但是可以获得`outWidth`,`outHeight`,`outMimeType`；这个技巧可以让我们提前读取图片的尺寸以及类型从而避免构建`Bitmap`对象时的内存分配;<br>\n`BitmapFactory.Options options = new BitmapFactory.Options()`<br>`options.inJustDecodeBounds = true`<br>`BitmapFactory.decodeResources(getResources, R.id.images, options)`<br>`int imageWidth = options.outWidth`<br>`int imageHeight = options.outHeight`<br>`String imageType = options.outMimeType`<br>测试图 分辨率：5760x3240 类型: .jpg<br>测试结果：outWidth = 5760; outHeight=3240 outMimeType = image/jpeg![](http://img1.gamersky.com/image2010/06/20100626h_246/01.jpg)<br>注意：为了避免OOM，在解码之前应先检查它的尺寸；除非你相信提供给你的尺寸数据符合可用的内存要求；<br>\n### Load a Scaled Down Version to memory<br>\n现在已经知道了图片的尺寸，接下来我们可以考虑决定是要将原图还是将修改后的图加载到内存中；我们要考虑以下几个因素：<br>\n1. 评估加载完整图片耗费的内存；<br>\n2. 加载这张图片时的涉及到的其他内存需求<br>\n3. 加载这张图片的`ImageView`或者其他UI控件的尺寸；<br>\n4. 屏幕的分辨率以及尺寸；<br>例如：不应该把一个分辨率1024x768的图片加载到一个分辨率128x96的`ImageView`中<br>为了得到图片的低分辨率版本，我们需要设置`BitmapFactory.Options`中`inSampleSize`的值；例如图片的分辨率2048x1536，`inSampleSize`为4，那得到的位图的分辨率为512x384(假如我们采取的是ARGB_8888格式)。下面这个方法告诉我们怎么计算sample size：<br>\n\n```java\n\n    public static int calculateInSampleSize (BitmapFactory.Options options,   \n      int reqWidth, int reqHeight) {\n        final int height = options.outHeight;\n        final int width = options.outWidth;\n        int inSampleSize = 1;\n        if (height > reqHeight || width > reqWidth) {\n          final int halfWidth = height /2;\n          final int halfHeight = width /2;\n          while (halfWidth / inSampleSize > reqWidth && halfHeight/inSampleSize> reqHeight) {\n            inSampleSize *=2；\n          }\n        }\n          return inSampleSize;\n      }  \n\n```\n\n注意：inSampleSize最终为2的幂，否则会向下取最靠近的2的幂的值；<br><br>\n获取到inSampleSize之后，下面的方法来获得缩小后的图片的低分辨率版本；\n\n```java\n\tpublic static Bitmap decodeSampledBimapFromResources (Resources res, int resId, int reqWidth, int reqHeight) {\n\t\tBitmapFactory.Options options = new BitmapFactory.Options();\n\t\toptions.inJustDecodeBounds = true;\n\t\tBitmapFactory.decodeResource(res, resId, options);\n\t\toptions.inSampleSize = calculateInSampleSize(options, reqWidth, reqHeight);\n\t\toptions.inJustDecodeBounds = false;\n\t\treturn BitmapFactory.decodeResource(res, resId, options);\n\t}\n```\n\n经过该方法后我们可以将任意大小的图片解码成低分辨率的版本来加载到内存和布局控件中；\n\n\n\n# question\n\n1. [手机分辨率与相机像素的问题](http://mobile.163.com/14/0421/08/9QBDVKM7001117A8_all.html)\n2. 当我将上述图片降低分辨率时，我设置的reqWidth = 200, reqHeight =200, 我得到inSampleSize =16，解码后，得到的outWidth = 1080 outHeight = 606 而不是5760/16=360和3240/16=202   why?\n3. 我将ImageView的layout_width = 200px，layout_height=200px；得到的效果不是方形；why？\n<br>\n\n# Conclusion\n\n 对于高分辨率的图片，为了获得低分辨率的版本，我们应先解码图片的边界，获得图片的尺寸及类型， 然后根据我们希望得到的分辨率获得inSamplseSize,再进行图片的全部解码；","slug":"training-Graphics-Animation-Bitmaps-1","published":1,"updated":"2021-05-26T10:35:06.111Z","_id":"ckp5bzk9p0003z83o20uadg5w","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"Loading-large-bitmaps-efficently\"><a href=\"#Loading-large-bitmaps-efficently\" class=\"headerlink\" title=\"Loading large bitmaps efficently\"></a>Loading large bitmaps efficently</h1><p>  使用<code>Bitmap</code>可以提升UI的交互性，但是使用不当会造成异常<code>java.lang.OutOfMemory:bitmap size excedds VM budget</code>;原因如下：  </p>\n<ol>\n<li>移动设备会限制系统资源；系统至少为应用保留<code>16MB</code>的内存空间；.<a href=\"http://source.android.com/compatibility/downloads.html#android-60\" target=\"_blank\" rel=\"noopener\">Android Compatibility Definition Document(CDD)</a> <strong>Section 3.7</strong> Virtual Machine  Compatibility 中规定可以在多种设备下保持应用流畅度的最小运行时内存；应用应该被优化到可以在该最小运行时内存执行；当然，不同的设备会适当的提高这个限制；<br>2. <code>Bitmap</code>特别占用内存；例如：Galaxy Nexus 使用2592x1936（五百万像素）照相机；而<code>Bitmap</code>的配置为<code>ARGB_8888</code>(android2.3以上默认采取该格式，这意味每一个像素需要占用4Bytes)，如果把该图片加载到内存，需要占用<code>19MB</code>(2592x1936x4 bytes)的内存；<br>3. app中UI经常需要一次加载多个<code>Bitmap</code>，控件<code>ListView</code>,<code>GridView</code>,<code>ViewPager</code>的通常包含多个Bitmap，并且在屏幕的不可见区域仍然有很多Bitmap等着手指一滑把他们加载到可视区域；</li>\n</ol>\n<h1 id=\"How\"><a href=\"#How\" class=\"headerlink\" title=\"How\"></a>How</h1><p>很多时候，图片的分辨率要高于手机屏幕的分辨率，为了匹配显示图片的控件，减少内存的开销，我们需要图片的低分辨率版本；<br></p>\n<h3 id=\"Read-Bitmap-Dimensions-and-Type\"><a href=\"#Read-Bitmap-Dimensions-and-Type\" class=\"headerlink\" title=\"Read Bitmap Dimensions and Type\"></a>Read Bitmap Dimensions and Type<br></h3><p><a href=\"http://developer.android.com/intl/zh-cn/reference/android/graphics/BitmapFactory.html\" target=\"_blank\" rel=\"noopener\">BitmapFactory</a>:根据不同的图片来源创建<code>Bitmap</code>对象，包括文件路径，流，字节数组；根据数据源选择合适的解码方法；使用这些方法构造<code>Bitmap</code>对象时需要分配内存；因此很容易导致<code>OOM</code>。不同的方法有不同的解码选项，我们需要通过<code>BitmapFactory.Options</code>来指定解码选项；例如在解码时，当指定<code>inJustDecodeBounds</code>属性为<code>true</code>来避免分配内存，这样会为<code>Bitmap</code>对象返回<code>null</code>，但是可以获得<code>outWidth</code>,<code>outHeight</code>,<code>outMimeType</code>；这个技巧可以让我们提前读取图片的尺寸以及类型从而避免构建<code>Bitmap</code>对象时的内存分配;<br><br><code>BitmapFactory.Options options = new BitmapFactory.Options()</code><br><code>options.inJustDecodeBounds = true</code><br><code>BitmapFactory.decodeResources(getResources, R.id.images, options)</code><br><code>int imageWidth = options.outWidth</code><br><code>int imageHeight = options.outHeight</code><br><code>String imageType = options.outMimeType</code><br>测试图 分辨率：5760x3240 类型: .jpg<br>测试结果：outWidth = 5760; outHeight=3240 outMimeType = image/jpeg<img src=\"http://img1.gamersky.com/image2010/06/20100626h_246/01.jpg\" alt><br>注意：为了避免OOM，在解码之前应先检查它的尺寸；除非你相信提供给你的尺寸数据符合可用的内存要求；<br></p>\n<h3 id=\"Load-a-Scaled-Down-Version-to-memory\"><a href=\"#Load-a-Scaled-Down-Version-to-memory\" class=\"headerlink\" title=\"Load a Scaled Down Version to memory\"></a>Load a Scaled Down Version to memory<br></h3><p>现在已经知道了图片的尺寸，接下来我们可以考虑决定是要将原图还是将修改后的图加载到内存中；我们要考虑以下几个因素：<br></p>\n<ol>\n<li>评估加载完整图片耗费的内存；<br></li>\n<li>加载这张图片时的涉及到的其他内存需求<br></li>\n<li>加载这张图片的<code>ImageView</code>或者其他UI控件的尺寸；<br></li>\n<li>屏幕的分辨率以及尺寸；<br>例如：不应该把一个分辨率1024x768的图片加载到一个分辨率128x96的<code>ImageView</code>中<br>为了得到图片的低分辨率版本，我们需要设置<code>BitmapFactory.Options</code>中<code>inSampleSize</code>的值；例如图片的分辨率2048x1536，<code>inSampleSize</code>为4，那得到的位图的分辨率为512x384(假如我们采取的是ARGB_8888格式)。下面这个方法告诉我们怎么计算sample size：<br></li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">calculateInSampleSize</span> <span class=\"params\">(BitmapFactory.Options options,   </span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  <span class=\"keyword\">int</span> reqWidth, <span class=\"keyword\">int</span> reqHeight)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> height = options.outHeight;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> width = options.outWidth;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> inSampleSize = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (height &gt; reqHeight || width &gt; reqWidth) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> halfWidth = height /<span class=\"number\">2</span>;</span><br><span class=\"line\">      <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> halfHeight = width /<span class=\"number\">2</span>;</span><br><span class=\"line\">      <span class=\"keyword\">while</span> (halfWidth / inSampleSize &gt; reqWidth &amp;&amp; halfHeight/inSampleSize&gt; reqHeight) &#123;</span><br><span class=\"line\">        inSampleSize *=<span class=\"number\">2</span>；</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> inSampleSize;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p>注意：inSampleSize最终为2的幂，否则会向下取最靠近的2的幂的值；<br><br><br>获取到inSampleSize之后，下面的方法来获得缩小后的图片的低分辨率版本；</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Bitmap <span class=\"title\">decodeSampledBimapFromResources</span> <span class=\"params\">(Resources res, <span class=\"keyword\">int</span> resId, <span class=\"keyword\">int</span> reqWidth, <span class=\"keyword\">int</span> reqHeight)</span> </span>&#123;</span><br><span class=\"line\">\tBitmapFactory.Options options = <span class=\"keyword\">new</span> BitmapFactory.Options();</span><br><span class=\"line\">\toptions.inJustDecodeBounds = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">\tBitmapFactory.decodeResource(res, resId, options);</span><br><span class=\"line\">\toptions.inSampleSize = calculateInSampleSize(options, reqWidth, reqHeight);</span><br><span class=\"line\">\toptions.inJustDecodeBounds = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> BitmapFactory.decodeResource(res, resId, options);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>经过该方法后我们可以将任意大小的图片解码成低分辨率的版本来加载到内存和布局控件中；</p>\n<h1 id=\"question\"><a href=\"#question\" class=\"headerlink\" title=\"question\"></a>question</h1><ol>\n<li><a href=\"http://mobile.163.com/14/0421/08/9QBDVKM7001117A8_all.html\" target=\"_blank\" rel=\"noopener\">手机分辨率与相机像素的问题</a></li>\n<li>当我将上述图片降低分辨率时，我设置的reqWidth = 200, reqHeight =200, 我得到inSampleSize =16，解码后，得到的outWidth = 1080 outHeight = 606 而不是5760/16=360和3240/16=202   why?</li>\n<li>我将ImageView的layout_width = 200px，layout_height=200px；得到的效果不是方形；why？<br><br></li>\n</ol>\n<h1 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h1><p> 对于高分辨率的图片，为了获得低分辨率的版本，我们应先解码图片的边界，获得图片的尺寸及类型， 然后根据我们希望得到的分辨率获得inSamplseSize,再进行图片的全部解码；</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Loading-large-bitmaps-efficently\"><a href=\"#Loading-large-bitmaps-efficently\" class=\"headerlink\" title=\"Loading large bitmaps efficently\"></a>Loading large bitmaps efficently</h1><p>  使用<code>Bitmap</code>可以提升UI的交互性，但是使用不当会造成异常<code>java.lang.OutOfMemory:bitmap size excedds VM budget</code>;原因如下：  </p>\n<ol>\n<li>移动设备会限制系统资源；系统至少为应用保留<code>16MB</code>的内存空间；.<a href=\"http://source.android.com/compatibility/downloads.html#android-60\" target=\"_blank\" rel=\"noopener\">Android Compatibility Definition Document(CDD)</a> <strong>Section 3.7</strong> Virtual Machine  Compatibility 中规定可以在多种设备下保持应用流畅度的最小运行时内存；应用应该被优化到可以在该最小运行时内存执行；当然，不同的设备会适当的提高这个限制；<br>2. <code>Bitmap</code>特别占用内存；例如：Galaxy Nexus 使用2592x1936（五百万像素）照相机；而<code>Bitmap</code>的配置为<code>ARGB_8888</code>(android2.3以上默认采取该格式，这意味每一个像素需要占用4Bytes)，如果把该图片加载到内存，需要占用<code>19MB</code>(2592x1936x4 bytes)的内存；<br>3. app中UI经常需要一次加载多个<code>Bitmap</code>，控件<code>ListView</code>,<code>GridView</code>,<code>ViewPager</code>的通常包含多个Bitmap，并且在屏幕的不可见区域仍然有很多Bitmap等着手指一滑把他们加载到可视区域；</li>\n</ol>\n<h1 id=\"How\"><a href=\"#How\" class=\"headerlink\" title=\"How\"></a>How</h1><p>很多时候，图片的分辨率要高于手机屏幕的分辨率，为了匹配显示图片的控件，减少内存的开销，我们需要图片的低分辨率版本；<br></p>\n<h3 id=\"Read-Bitmap-Dimensions-and-Type\"><a href=\"#Read-Bitmap-Dimensions-and-Type\" class=\"headerlink\" title=\"Read Bitmap Dimensions and Type\"></a>Read Bitmap Dimensions and Type<br></h3><p><a href=\"http://developer.android.com/intl/zh-cn/reference/android/graphics/BitmapFactory.html\" target=\"_blank\" rel=\"noopener\">BitmapFactory</a>:根据不同的图片来源创建<code>Bitmap</code>对象，包括文件路径，流，字节数组；根据数据源选择合适的解码方法；使用这些方法构造<code>Bitmap</code>对象时需要分配内存；因此很容易导致<code>OOM</code>。不同的方法有不同的解码选项，我们需要通过<code>BitmapFactory.Options</code>来指定解码选项；例如在解码时，当指定<code>inJustDecodeBounds</code>属性为<code>true</code>来避免分配内存，这样会为<code>Bitmap</code>对象返回<code>null</code>，但是可以获得<code>outWidth</code>,<code>outHeight</code>,<code>outMimeType</code>；这个技巧可以让我们提前读取图片的尺寸以及类型从而避免构建<code>Bitmap</code>对象时的内存分配;<br><br><code>BitmapFactory.Options options = new BitmapFactory.Options()</code><br><code>options.inJustDecodeBounds = true</code><br><code>BitmapFactory.decodeResources(getResources, R.id.images, options)</code><br><code>int imageWidth = options.outWidth</code><br><code>int imageHeight = options.outHeight</code><br><code>String imageType = options.outMimeType</code><br>测试图 分辨率：5760x3240 类型: .jpg<br>测试结果：outWidth = 5760; outHeight=3240 outMimeType = image/jpeg<img src=\"http://img1.gamersky.com/image2010/06/20100626h_246/01.jpg\" alt><br>注意：为了避免OOM，在解码之前应先检查它的尺寸；除非你相信提供给你的尺寸数据符合可用的内存要求；<br></p>\n<h3 id=\"Load-a-Scaled-Down-Version-to-memory\"><a href=\"#Load-a-Scaled-Down-Version-to-memory\" class=\"headerlink\" title=\"Load a Scaled Down Version to memory\"></a>Load a Scaled Down Version to memory<br></h3><p>现在已经知道了图片的尺寸，接下来我们可以考虑决定是要将原图还是将修改后的图加载到内存中；我们要考虑以下几个因素：<br></p>\n<ol>\n<li>评估加载完整图片耗费的内存；<br></li>\n<li>加载这张图片时的涉及到的其他内存需求<br></li>\n<li>加载这张图片的<code>ImageView</code>或者其他UI控件的尺寸；<br></li>\n<li>屏幕的分辨率以及尺寸；<br>例如：不应该把一个分辨率1024x768的图片加载到一个分辨率128x96的<code>ImageView</code>中<br>为了得到图片的低分辨率版本，我们需要设置<code>BitmapFactory.Options</code>中<code>inSampleSize</code>的值；例如图片的分辨率2048x1536，<code>inSampleSize</code>为4，那得到的位图的分辨率为512x384(假如我们采取的是ARGB_8888格式)。下面这个方法告诉我们怎么计算sample size：<br></li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">calculateInSampleSize</span> <span class=\"params\">(BitmapFactory.Options options,   </span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  <span class=\"keyword\">int</span> reqWidth, <span class=\"keyword\">int</span> reqHeight)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> height = options.outHeight;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> width = options.outWidth;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> inSampleSize = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (height &gt; reqHeight || width &gt; reqWidth) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> halfWidth = height /<span class=\"number\">2</span>;</span><br><span class=\"line\">      <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> halfHeight = width /<span class=\"number\">2</span>;</span><br><span class=\"line\">      <span class=\"keyword\">while</span> (halfWidth / inSampleSize &gt; reqWidth &amp;&amp; halfHeight/inSampleSize&gt; reqHeight) &#123;</span><br><span class=\"line\">        inSampleSize *=<span class=\"number\">2</span>；</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> inSampleSize;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p>注意：inSampleSize最终为2的幂，否则会向下取最靠近的2的幂的值；<br><br><br>获取到inSampleSize之后，下面的方法来获得缩小后的图片的低分辨率版本；</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Bitmap <span class=\"title\">decodeSampledBimapFromResources</span> <span class=\"params\">(Resources res, <span class=\"keyword\">int</span> resId, <span class=\"keyword\">int</span> reqWidth, <span class=\"keyword\">int</span> reqHeight)</span> </span>&#123;</span><br><span class=\"line\">\tBitmapFactory.Options options = <span class=\"keyword\">new</span> BitmapFactory.Options();</span><br><span class=\"line\">\toptions.inJustDecodeBounds = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">\tBitmapFactory.decodeResource(res, resId, options);</span><br><span class=\"line\">\toptions.inSampleSize = calculateInSampleSize(options, reqWidth, reqHeight);</span><br><span class=\"line\">\toptions.inJustDecodeBounds = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> BitmapFactory.decodeResource(res, resId, options);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>经过该方法后我们可以将任意大小的图片解码成低分辨率的版本来加载到内存和布局控件中；</p>\n<h1 id=\"question\"><a href=\"#question\" class=\"headerlink\" title=\"question\"></a>question</h1><ol>\n<li><a href=\"http://mobile.163.com/14/0421/08/9QBDVKM7001117A8_all.html\" target=\"_blank\" rel=\"noopener\">手机分辨率与相机像素的问题</a></li>\n<li>当我将上述图片降低分辨率时，我设置的reqWidth = 200, reqHeight =200, 我得到inSampleSize =16，解码后，得到的outWidth = 1080 outHeight = 606 而不是5760/16=360和3240/16=202   why?</li>\n<li>我将ImageView的layout_width = 200px，layout_height=200px；得到的效果不是方形；why？<br><br></li>\n</ol>\n<h1 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h1><p> 对于高分辨率的图片，为了获得低分辨率的版本，我们应先解码图片的边界，获得图片的尺寸及类型， 然后根据我们希望得到的分辨率获得inSamplseSize,再进行图片的全部解码；</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"ckp5bxa8v0001ya3owzpfszi1","category_id":"ckp5bxa9j0008ya3o85e9k05z","_id":"ckp5bxaa9000lya3ozkexeegg"},{"post_id":"ckp5bxa920005ya3ohckh6gw0","category_id":"ckp5bxa9j0008ya3o85e9k05z","_id":"ckp5bxaa9000pya3oomhu3w4y"},{"post_id":"ckp5bxa930006ya3onkytbwfz","category_id":"ckp5bxa9q000eya3omedin6ob","_id":"ckp5bxaa9000rya3ost6hyq6a"},{"post_id":"ckp5bxa940007ya3ou989j05k","category_id":"ckp5bxa9q000eya3omedin6ob","_id":"ckp5bxaaa000tya3ouertnfbu"},{"post_id":"ckp5bxa910004ya3oh3j5et5x","category_id":"ckp5bxa9j0008ya3o85e9k05z","_id":"ckp5byq0w0000z83oeh8x2ni4"},{"post_id":"ckp5bxa900003ya3ot8fc0lsx","category_id":"ckp5bz8vq0001z83oopuw1bd7","_id":"ckp5bz8vr0002z83oyvfqqvx4"},{"post_id":"ckp5bzk9p0003z83o20uadg5w","category_id":"ckp5bxa9q000eya3omedin6ob","_id":"ckp5bzk9r0005z83oae5gfm3x"}],"PostTag":[{"post_id":"ckp5bxa8v0001ya3owzpfszi1","tag_id":"ckp5bxa9n0009ya3ovhypt5s2","_id":"ckp5bxaa8000kya3ozwbab7dr"},{"post_id":"ckp5bxa8z0002ya3o2ysblw4w","tag_id":"ckp5bxa9o000bya3omsxbyf1z","_id":"ckp5bxaa9000mya3o182nkzyh"},{"post_id":"ckp5bxa900003ya3ot8fc0lsx","tag_id":"ckp5bxa9p000dya3o7x4waspz","_id":"ckp5bxaa9000oya3o2j7360m0"},{"post_id":"ckp5bxa910004ya3oh3j5et5x","tag_id":"ckp5bxa9r000fya3o2s0cr5ek","_id":"ckp5bxaa9000qya3ogc7woui6"},{"post_id":"ckp5bxa920005ya3ohckh6gw0","tag_id":"ckp5bxa9r000hya3oedhlvt8w","_id":"ckp5bxaaa000sya3o6h7rjf34"},{"post_id":"ckp5bxa930006ya3onkytbwfz","tag_id":"ckp5bxa9s000iya3olbinr6ry","_id":"ckp5bxaaa000uya3objgo0bac"},{"post_id":"ckp5bxa940007ya3ou989j05k","tag_id":"ckp5bxa9s000iya3olbinr6ry","_id":"ckp5bxaaa000vya3o6lm9nu7h"},{"post_id":"ckp5bzk9p0003z83o20uadg5w","tag_id":"ckp5bzk9q0004z83o8h5jovv8","_id":"ckp5bzk9s0006z83od2980p33"}],"Tag":[{"name":"android布局技巧 TextView","_id":"ckp5bxa9n0009ya3ovhypt5s2"},{"name":"版本控制","_id":"ckp5bxa9o000bya3omsxbyf1z"},{"name":"项目管理 自动化构建","_id":"ckp5bxa9p000dya3o7x4waspz"},{"name":"android布局 软键盘 Android","_id":"ckp5bxa9r000fya3o2s0cr5ek"},{"name":"hexo","_id":"ckp5bxa9r000hya3oedhlvt8w"},{"name":"单元测试 Android","_id":"ckp5bxa9s000iya3olbinr6ry"},{"name":"android","_id":"ckp5bzk9q0004z83o8h5jovv8"}]}}