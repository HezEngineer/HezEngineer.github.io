{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[],"Cache":[{"_id":"source/_posts/TextView的drawable属性.md","hash":"78e3a559f4fa9d0e776db39251a3ecc5269b89e8","modified":1490501144010},{"_id":"source/_posts/training-Graphics-Animation-Bitmaps-1.md","hash":"343eada2014ee048eb4dec4e7e0b02089db0e56e","modified":1490501144015},{"_id":"public/2016/04/23/TextView的drawable属性/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1490503268276},{"_id":"public/2016/04/01/training-Graphics-Animation-Bitmaps-1/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1490503268276},{"_id":"public/archives/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1490503268277},{"_id":"public/archives/2016/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1490503268277},{"_id":"public/archives/2016/04/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1490503268277},{"_id":"public/categories/android布局技巧/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1490503268277},{"_id":"public/categories/android/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1490503268277},{"_id":"public/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1490503268277},{"_id":"public/tags/android布局技巧-TextView/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1490503268277},{"_id":"public/tags/bitmap/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1490503268278}],"Category":[{"name":"android布局技巧","_id":"cj0q75u7q0001g0x8tmdrqphp"},{"name":"android","_id":"cj0q75u7y0006g0x89og7tjbs"}],"Data":[],"Page":[],"Post":[{"title":"TextView的drawable属性","date":"2016-04-23T00:52:43.000Z","_content":"# what\n---\n实现Icon+文字在一个视觉元素的需求;\n### drawable属性\n* android:drawableLeft 图片在文字的左侧  \n* android:drawableTop 图片在文字的上方  \n* android:drawableRight 图片在文字的右侧  \n* android:drawableBottom 图片在文字的下方  \n* android:drawableStart 图片在文字的开始处 (API14才有,17生效)  \n* android:drawableBottom  图片在文字的结尾 (API14才有,17生效)  \n* android:drawablePadding 设置文字与图片之间的距离；  \n\n\n# how\n---\n\t\t<TextView\n      \t \t  android:id=\"@+id/plus_tv\"\n\t\t\t\t android:layout_width=\"400dp\"\n            android:layout_height=\"wrap_content\"\n       \t\t android:text=\"加分\"\n        \t android:textColor=\"@android:color/holo_blue_dark\"  \n        \t android:textSize=\"36sp\"\n        \t android:textStyle=\"bold\"\n        \t android:typeface=\"serif\"  \n       \t\t style=\"?buttonBarButtonStyle\"\n    \t\t   android:gravity=\"center_horizontal\"\n        \t android:drawableBottom=\"@drawable/ic_sentiment_dissatisfied_black_48dp\"\n        \t android:drawablePadding=\"20dp\"\n        \t android:drawableTint=\"@color/colorAccent\"/>  \n\n\n\n# question\n---\n### 注意的问题\n* gravity属性只对文字起作用  \n* drawable在其方向上居中显示；\n* 当TextView的宽高属性为wrap_content时，宽高取决于文字和图片的较宽或较高者；\n### 局限性\n* 当drawable的宽高不确定时；例如，drawable为shape时，shape的宽高取决于控件本身的高度；所以shape无法显示；  \n* 当需要对drawable进行单独控制时；\n\n参考资料: [使用TextView的drawable属性](http://toughcoder.net/blog/2015/05/20/android-layout-trick-drawable-of-textview/)\n","source":"_posts/TextView的drawable属性.md","raw":"---\ntitle: TextView的drawable属性\ndate: 2016-04-23 08:52:43\ntags: android布局技巧 TextView\ncategories: android布局技巧\n---\n# what\n---\n实现Icon+文字在一个视觉元素的需求;\n### drawable属性\n* android:drawableLeft 图片在文字的左侧  \n* android:drawableTop 图片在文字的上方  \n* android:drawableRight 图片在文字的右侧  \n* android:drawableBottom 图片在文字的下方  \n* android:drawableStart 图片在文字的开始处 (API14才有,17生效)  \n* android:drawableBottom  图片在文字的结尾 (API14才有,17生效)  \n* android:drawablePadding 设置文字与图片之间的距离；  \n\n\n# how\n---\n\t\t<TextView\n      \t \t  android:id=\"@+id/plus_tv\"\n\t\t\t\t android:layout_width=\"400dp\"\n            android:layout_height=\"wrap_content\"\n       \t\t android:text=\"加分\"\n        \t android:textColor=\"@android:color/holo_blue_dark\"  \n        \t android:textSize=\"36sp\"\n        \t android:textStyle=\"bold\"\n        \t android:typeface=\"serif\"  \n       \t\t style=\"?buttonBarButtonStyle\"\n    \t\t   android:gravity=\"center_horizontal\"\n        \t android:drawableBottom=\"@drawable/ic_sentiment_dissatisfied_black_48dp\"\n        \t android:drawablePadding=\"20dp\"\n        \t android:drawableTint=\"@color/colorAccent\"/>  \n\n\n\n# question\n---\n### 注意的问题\n* gravity属性只对文字起作用  \n* drawable在其方向上居中显示；\n* 当TextView的宽高属性为wrap_content时，宽高取决于文字和图片的较宽或较高者；\n### 局限性\n* 当drawable的宽高不确定时；例如，drawable为shape时，shape的宽高取决于控件本身的高度；所以shape无法显示；  \n* 当需要对drawable进行单独控制时；\n\n参考资料: [使用TextView的drawable属性](http://toughcoder.net/blog/2015/05/20/android-layout-trick-drawable-of-textview/)\n","slug":"TextView的drawable属性","published":1,"updated":"2017-03-26T04:05:44.010Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0q75u7l0000g0x83ui5r2mr","content":"<h1 id=\"what\"><a href=\"#what\" class=\"headerlink\" title=\"what\"></a>what</h1><hr>\n<p>实现Icon+文字在一个视觉元素的需求;</p>\n<h3 id=\"drawable属性\"><a href=\"#drawable属性\" class=\"headerlink\" title=\"drawable属性\"></a>drawable属性</h3><ul>\n<li>android:drawableLeft 图片在文字的左侧  </li>\n<li>android:drawableTop 图片在文字的上方  </li>\n<li>android:drawableRight 图片在文字的右侧  </li>\n<li>android:drawableBottom 图片在文字的下方  </li>\n<li>android:drawableStart 图片在文字的开始处 (API14才有,17生效)  </li>\n<li>android:drawableBottom  图片在文字的结尾 (API14才有,17生效)  </li>\n<li>android:drawablePadding 设置文字与图片之间的距离；  </li>\n</ul>\n<h1 id=\"how\"><a href=\"#how\" class=\"headerlink\" title=\"how\"></a>how</h1><hr>\n<pre><code>&lt;TextView\n         android:id=&quot;@+id/plus_tv&quot;\n         android:layout_width=&quot;400dp&quot;\n    android:layout_height=&quot;wrap_content&quot;\n        android:text=&quot;加分&quot;\n     android:textColor=&quot;@android:color/holo_blue_dark&quot;  \n     android:textSize=&quot;36sp&quot;\n     android:textStyle=&quot;bold&quot;\n     android:typeface=&quot;serif&quot;  \n        style=&quot;?buttonBarButtonStyle&quot;\n       android:gravity=&quot;center_horizontal&quot;\n     android:drawableBottom=&quot;@drawable/ic_sentiment_dissatisfied_black_48dp&quot;\n     android:drawablePadding=&quot;20dp&quot;\n     android:drawableTint=&quot;@color/colorAccent&quot;/&gt;  \n</code></pre><h1 id=\"question\"><a href=\"#question\" class=\"headerlink\" title=\"question\"></a>question</h1><hr>\n<h3 id=\"注意的问题\"><a href=\"#注意的问题\" class=\"headerlink\" title=\"注意的问题\"></a>注意的问题</h3><ul>\n<li>gravity属性只对文字起作用  </li>\n<li>drawable在其方向上居中显示；</li>\n<li>当TextView的宽高属性为wrap_content时，宽高取决于文字和图片的较宽或较高者；<h3 id=\"局限性\"><a href=\"#局限性\" class=\"headerlink\" title=\"局限性\"></a>局限性</h3></li>\n<li>当drawable的宽高不确定时；例如，drawable为shape时，shape的宽高取决于控件本身的高度；所以shape无法显示；  </li>\n<li>当需要对drawable进行单独控制时；</li>\n</ul>\n<p>参考资料: <a href=\"http://toughcoder.net/blog/2015/05/20/android-layout-trick-drawable-of-textview/\" target=\"_blank\" rel=\"external\">使用TextView的drawable属性</a></p>\n","excerpt":"","more":"<h1 id=\"what\"><a href=\"#what\" class=\"headerlink\" title=\"what\"></a>what</h1><hr>\n<p>实现Icon+文字在一个视觉元素的需求;</p>\n<h3 id=\"drawable属性\"><a href=\"#drawable属性\" class=\"headerlink\" title=\"drawable属性\"></a>drawable属性</h3><ul>\n<li>android:drawableLeft 图片在文字的左侧  </li>\n<li>android:drawableTop 图片在文字的上方  </li>\n<li>android:drawableRight 图片在文字的右侧  </li>\n<li>android:drawableBottom 图片在文字的下方  </li>\n<li>android:drawableStart 图片在文字的开始处 (API14才有,17生效)  </li>\n<li>android:drawableBottom  图片在文字的结尾 (API14才有,17生效)  </li>\n<li>android:drawablePadding 设置文字与图片之间的距离；  </li>\n</ul>\n<h1 id=\"how\"><a href=\"#how\" class=\"headerlink\" title=\"how\"></a>how</h1><hr>\n<pre><code>&lt;TextView\n         android:id=&quot;@+id/plus_tv&quot;\n         android:layout_width=&quot;400dp&quot;\n    android:layout_height=&quot;wrap_content&quot;\n        android:text=&quot;加分&quot;\n     android:textColor=&quot;@android:color/holo_blue_dark&quot;  \n     android:textSize=&quot;36sp&quot;\n     android:textStyle=&quot;bold&quot;\n     android:typeface=&quot;serif&quot;  \n        style=&quot;?buttonBarButtonStyle&quot;\n       android:gravity=&quot;center_horizontal&quot;\n     android:drawableBottom=&quot;@drawable/ic_sentiment_dissatisfied_black_48dp&quot;\n     android:drawablePadding=&quot;20dp&quot;\n     android:drawableTint=&quot;@color/colorAccent&quot;/&gt;  \n</code></pre><h1 id=\"question\"><a href=\"#question\" class=\"headerlink\" title=\"question\"></a>question</h1><hr>\n<h3 id=\"注意的问题\"><a href=\"#注意的问题\" class=\"headerlink\" title=\"注意的问题\"></a>注意的问题</h3><ul>\n<li>gravity属性只对文字起作用  </li>\n<li>drawable在其方向上居中显示；</li>\n<li>当TextView的宽高属性为wrap_content时，宽高取决于文字和图片的较宽或较高者；<h3 id=\"局限性\"><a href=\"#局限性\" class=\"headerlink\" title=\"局限性\"></a>局限性</h3></li>\n<li>当drawable的宽高不确定时；例如，drawable为shape时，shape的宽高取决于控件本身的高度；所以shape无法显示；  </li>\n<li>当需要对drawable进行单独控制时；</li>\n</ul>\n<p>参考资料: <a href=\"http://toughcoder.net/blog/2015/05/20/android-layout-trick-drawable-of-textview/\">使用TextView的drawable属性</a></p>\n"},{"title":"training-Graphics&Animation-Bitmaps-1","date":"2016-04-01T12:08:13.000Z","_content":"# what\n---\n# Loading large bitmaps efficently\n\n  使用`Bitmap`可以提升UI的交互性，但是使用不当会造成异常`java.lang.OutOfMemory:bitmap size excedds VM budget`;原因如下：  \n1. 移动设备会限制系统资源；系统至少为应用保留`16MB`的内存空间；.[Android Compatibility Definition Document(CDD)](http://source.android.com/compatibility/downloads.html#android-60) <strong>Section 3.7</Strong> Virtual Machine  Compatibility 中规定可以在多种设备下保持应用流畅度的最小运行时内存；应用应该被优化到可以在该最小运行时内存执行；当然，不同的设备会适当的提高这个限制；<br>2. `Bitmap`特别占用内存；例如：Galaxy Nexus 使用2592x1936（五百万像素）照相机；而`Bitmap`的配置为`ARGB_8888`(android2.3以上默认采取该格式，这意味每一个像素需要占用4Bytes)，如果把该图片加载到内存，需要占用`19MB`(2592x1936x4 bytes)的内存；<br>3. app中UI经常需要一次加载多个`Bitmap`，控件`ListView`,`GridView`,`ViewPager`的通常包含多个Bitmap，并且在屏幕的不可见区域仍然有很多Bitmap等着手指一滑把他们加载到可视区域；\n\n<!-----more>\n---\n# How\n---\n很多时候，图片的分辨率要高于手机屏幕的分辨率，为了匹配显示图片的控件，减少内存的开销，我们需要图片的低分辨率版本；<br>\n### Read Bitmap Dimensions and Type<br>\n[BitmapFactory](http://developer.android.com/intl/zh-cn/reference/android/graphics/BitmapFactory.html):根据不同的图片来源创建`Bitmap`对象，包括文件路径，流，字节数组；根据数据源选择合适的解码方法；使用这些方法构造`Bitmap`对象时需要分配内存；因此很容易导致`OOM`。不同的方法有不同的解码选项，我们需要通过`BitmapFactory.Options`来指定解码选项；例如在解码时，当指定`inJustDecodeBounds`属性为`true`来避免分配内存，这样会为`Bitmap`对象返回`null`，但是可以获得`outWidth`,`outHeight`,`outMimeType`；这个技巧可以让我们提前读取图片的尺寸以及类型从而避免构建`Bitmap`对象时的内存分配;<br>\n`BitmapFactory.Options options = new BitmapFactory.Options()`<br>`options.inJustDecodeBounds = true`<br>`BitmapFactory.decodeResources(getResources, R.id.images, options)`<br>`int imageWidth = options.outWidth`<br>`int imageHeight = options.outHeight`<br>`String imageType = options.outMimeType`<br>测试图 分辨率：5760x3240 类型: .jpg<br>测试结果：outWidth = 5760; outHeight=3240 outMimeType = image/jpeg![](http://img1.gamersky.com/image2010/06/20100626h_246/01.jpg)<br>注意：为了避免OOM，在解码之前应先检查它的尺寸；除非你相信提供给你的尺寸数据符合可用的内存要求；<br>\n### Load a Scaled Down Version to memory<br>\n现在已经知道了图片的尺寸，接下来我们可以考虑决定是要将原图还是将修改后的图加载到内存中；我们要考虑以下几个因素：<br>\n1. 评估加载完整图片耗费的内存；<br>\n2. 加载这张图片时的涉及到的其他内存需求<br>\n3. 加载这张图片的`ImageView`或者其他UI控件的尺寸；<br>\n4. 屏幕的分辨率以及尺寸；<br>例如：不应该把一个分辨率1024x768的图片加载到一个分辨率128x96的`ImageView`中<br>为了得到图片的低分辨率版本，我们需要设置`BitmapFactory.Options`中`inSampleSize`的值；例如图片的分辨率2048x1536，`inSampleSize`为4，那得到的位图的分辨率为512x384(假如我们采取的是ARGB_8888格式)。下面这个方法告诉我们怎么计算sample size：<br>\n<pre><code>   \n     public static int calculateInSampleSize (BitmapFactory.Options options,   \n\tint reqWidth, int reqHeight) {\n\tfinal int height = options.outHeight;\n\tfinal int width = options.outWidth;\n\tint inSampleSize = 1;\n\tif (height > reqHeight || width > reqWidth) {\n\t\tfinal int halfWidth = height /2;\n\t\tfinal int halfHeight = width /2;\n\t\twhile (halfWidth / inSampleSize > reqWidth && halfHeight/ inSampleSize > reqHeight) {\n\t\t\t\tinSampleSize *=2；\n         \t}\n\t}\n\treturn inSampleSize;\n      }\n\n</code></pre>\n注意：inSampleSize最终为2的幂，否则会向下取最靠近的2的幂的值；<br><br>\n获取到inSampleSize之后，下面的方法来获得缩小后的图片的低分辨率版本；\n<pre><code>\n\tpublic static Bitmap decodeSampledBimapFromResources (Resources res, int resId, int reqWidth, int reqHeight) {\n\t\tBitmapFactory.Options options = new BitmapFactory.Options();\n\t\toptions.inJustDecodeBounds = true;\n\t\tBitmapFactory.decodeResource(res, resId, options);\n\t\toptions.inSampleSize = calculateInSampleSize(options, reqWidth, reqHeight);\n\t\toptions.inJustDecodeBounds = false;\n\t\treturn BitmapFactory.decodeResource(res, resId, options);\n\t}\n</code></pre>经过该方法后我们可以将任意大小的图片解码成低分辨率的版本来加载到内存和布局控件中；\n\n\n---\n# question\n---\n1. [手机分辨率与相机像素的问题](http://mobile.163.com/14/0421/08/9QBDVKM7001117A8_all.html)\n2. 当我将上述图片降低分辨率时，我设置的reqWidth = 200, reqHeight =200, 我得到inSampleSize =16，解码后，得到的outWidth = 1080 outHeight = 606 而不是5760/16=360和3240/16=202   why?\n3. 我将ImageView的layout_width = 200px，layout_height=200px；得到的效果不是方形；why？\n<br>\n*****\n# Conclusion\n*****\n 对于高分辨率的图片，为了获得低分辨率的版本，我们应先解码图片的边界，获得图片的尺寸及类型， 然后根据我们希望得到的分辨率获得inSamplseSize,再进行图片的全部解码；\n","source":"_posts/training-Graphics-Animation-Bitmaps-1.md","raw":"---\ntitle: training-Graphics&Animation-Bitmaps-1\ndate: 2016-04-01 20:08:13\ntags: bitmap\ncategories: android\n---\n# what\n---\n# Loading large bitmaps efficently\n\n  使用`Bitmap`可以提升UI的交互性，但是使用不当会造成异常`java.lang.OutOfMemory:bitmap size excedds VM budget`;原因如下：  \n1. 移动设备会限制系统资源；系统至少为应用保留`16MB`的内存空间；.[Android Compatibility Definition Document(CDD)](http://source.android.com/compatibility/downloads.html#android-60) <strong>Section 3.7</Strong> Virtual Machine  Compatibility 中规定可以在多种设备下保持应用流畅度的最小运行时内存；应用应该被优化到可以在该最小运行时内存执行；当然，不同的设备会适当的提高这个限制；<br>2. `Bitmap`特别占用内存；例如：Galaxy Nexus 使用2592x1936（五百万像素）照相机；而`Bitmap`的配置为`ARGB_8888`(android2.3以上默认采取该格式，这意味每一个像素需要占用4Bytes)，如果把该图片加载到内存，需要占用`19MB`(2592x1936x4 bytes)的内存；<br>3. app中UI经常需要一次加载多个`Bitmap`，控件`ListView`,`GridView`,`ViewPager`的通常包含多个Bitmap，并且在屏幕的不可见区域仍然有很多Bitmap等着手指一滑把他们加载到可视区域；\n\n<!-----more>\n---\n# How\n---\n很多时候，图片的分辨率要高于手机屏幕的分辨率，为了匹配显示图片的控件，减少内存的开销，我们需要图片的低分辨率版本；<br>\n### Read Bitmap Dimensions and Type<br>\n[BitmapFactory](http://developer.android.com/intl/zh-cn/reference/android/graphics/BitmapFactory.html):根据不同的图片来源创建`Bitmap`对象，包括文件路径，流，字节数组；根据数据源选择合适的解码方法；使用这些方法构造`Bitmap`对象时需要分配内存；因此很容易导致`OOM`。不同的方法有不同的解码选项，我们需要通过`BitmapFactory.Options`来指定解码选项；例如在解码时，当指定`inJustDecodeBounds`属性为`true`来避免分配内存，这样会为`Bitmap`对象返回`null`，但是可以获得`outWidth`,`outHeight`,`outMimeType`；这个技巧可以让我们提前读取图片的尺寸以及类型从而避免构建`Bitmap`对象时的内存分配;<br>\n`BitmapFactory.Options options = new BitmapFactory.Options()`<br>`options.inJustDecodeBounds = true`<br>`BitmapFactory.decodeResources(getResources, R.id.images, options)`<br>`int imageWidth = options.outWidth`<br>`int imageHeight = options.outHeight`<br>`String imageType = options.outMimeType`<br>测试图 分辨率：5760x3240 类型: .jpg<br>测试结果：outWidth = 5760; outHeight=3240 outMimeType = image/jpeg![](http://img1.gamersky.com/image2010/06/20100626h_246/01.jpg)<br>注意：为了避免OOM，在解码之前应先检查它的尺寸；除非你相信提供给你的尺寸数据符合可用的内存要求；<br>\n### Load a Scaled Down Version to memory<br>\n现在已经知道了图片的尺寸，接下来我们可以考虑决定是要将原图还是将修改后的图加载到内存中；我们要考虑以下几个因素：<br>\n1. 评估加载完整图片耗费的内存；<br>\n2. 加载这张图片时的涉及到的其他内存需求<br>\n3. 加载这张图片的`ImageView`或者其他UI控件的尺寸；<br>\n4. 屏幕的分辨率以及尺寸；<br>例如：不应该把一个分辨率1024x768的图片加载到一个分辨率128x96的`ImageView`中<br>为了得到图片的低分辨率版本，我们需要设置`BitmapFactory.Options`中`inSampleSize`的值；例如图片的分辨率2048x1536，`inSampleSize`为4，那得到的位图的分辨率为512x384(假如我们采取的是ARGB_8888格式)。下面这个方法告诉我们怎么计算sample size：<br>\n<pre><code>   \n     public static int calculateInSampleSize (BitmapFactory.Options options,   \n\tint reqWidth, int reqHeight) {\n\tfinal int height = options.outHeight;\n\tfinal int width = options.outWidth;\n\tint inSampleSize = 1;\n\tif (height > reqHeight || width > reqWidth) {\n\t\tfinal int halfWidth = height /2;\n\t\tfinal int halfHeight = width /2;\n\t\twhile (halfWidth / inSampleSize > reqWidth && halfHeight/ inSampleSize > reqHeight) {\n\t\t\t\tinSampleSize *=2；\n         \t}\n\t}\n\treturn inSampleSize;\n      }\n\n</code></pre>\n注意：inSampleSize最终为2的幂，否则会向下取最靠近的2的幂的值；<br><br>\n获取到inSampleSize之后，下面的方法来获得缩小后的图片的低分辨率版本；\n<pre><code>\n\tpublic static Bitmap decodeSampledBimapFromResources (Resources res, int resId, int reqWidth, int reqHeight) {\n\t\tBitmapFactory.Options options = new BitmapFactory.Options();\n\t\toptions.inJustDecodeBounds = true;\n\t\tBitmapFactory.decodeResource(res, resId, options);\n\t\toptions.inSampleSize = calculateInSampleSize(options, reqWidth, reqHeight);\n\t\toptions.inJustDecodeBounds = false;\n\t\treturn BitmapFactory.decodeResource(res, resId, options);\n\t}\n</code></pre>经过该方法后我们可以将任意大小的图片解码成低分辨率的版本来加载到内存和布局控件中；\n\n\n---\n# question\n---\n1. [手机分辨率与相机像素的问题](http://mobile.163.com/14/0421/08/9QBDVKM7001117A8_all.html)\n2. 当我将上述图片降低分辨率时，我设置的reqWidth = 200, reqHeight =200, 我得到inSampleSize =16，解码后，得到的outWidth = 1080 outHeight = 606 而不是5760/16=360和3240/16=202   why?\n3. 我将ImageView的layout_width = 200px，layout_height=200px；得到的效果不是方形；why？\n<br>\n*****\n# Conclusion\n*****\n 对于高分辨率的图片，为了获得低分辨率的版本，我们应先解码图片的边界，获得图片的尺寸及类型， 然后根据我们希望得到的分辨率获得inSamplseSize,再进行图片的全部解码；\n","slug":"training-Graphics-Animation-Bitmaps-1","published":1,"updated":"2017-03-26T04:05:44.015Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0q75u7w0005g0x8h35br8oq","content":"<h1 id=\"what\"><a href=\"#what\" class=\"headerlink\" title=\"what\"></a>what</h1><hr>\n<h1 id=\"Loading-large-bitmaps-efficently\"><a href=\"#Loading-large-bitmaps-efficently\" class=\"headerlink\" title=\"Loading large bitmaps efficently\"></a>Loading large bitmaps efficently</h1><p>  使用<code>Bitmap</code>可以提升UI的交互性，但是使用不当会造成异常<code>java.lang.OutOfMemory:bitmap size excedds VM budget</code>;原因如下：  </p>\n<ol>\n<li>移动设备会限制系统资源；系统至少为应用保留<code>16MB</code>的内存空间；.<a href=\"http://source.android.com/compatibility/downloads.html#android-60\" target=\"_blank\" rel=\"external\">Android Compatibility Definition Document(CDD)</a> <strong>Section 3.7</strong> Virtual Machine  Compatibility 中规定可以在多种设备下保持应用流畅度的最小运行时内存；应用应该被优化到可以在该最小运行时内存执行；当然，不同的设备会适当的提高这个限制；<br>2. <code>Bitmap</code>特别占用内存；例如：Galaxy Nexus 使用2592x1936（五百万像素）照相机；而<code>Bitmap</code>的配置为<code>ARGB_8888</code>(android2.3以上默认采取该格式，这意味每一个像素需要占用4Bytes)，如果把该图片加载到内存，需要占用<code>19MB</code>(2592x1936x4 bytes)的内存；<br>3. app中UI经常需要一次加载多个<code>Bitmap</code>，控件<code>ListView</code>,<code>GridView</code>,<code>ViewPager</code>的通常包含多个Bitmap，并且在屏幕的不可见区域仍然有很多Bitmap等着手指一滑把他们加载到可视区域；</li>\n</ol>\n<h2 id=\"lt-—–more-gt\"><a href=\"#lt-—–more-gt\" class=\"headerlink\" title=\"&lt;!—–more&gt;\"></a>&lt;!—–more&gt;</h2><h1 id=\"How\"><a href=\"#How\" class=\"headerlink\" title=\"How\"></a>How</h1><hr>\n<p>很多时候，图片的分辨率要高于手机屏幕的分辨率，为了匹配显示图片的控件，减少内存的开销，我们需要图片的低分辨率版本；<br></p>\n<h3 id=\"Read-Bitmap-Dimensions-and-Type\"><a href=\"#Read-Bitmap-Dimensions-and-Type\" class=\"headerlink\" title=\"Read Bitmap Dimensions and Type\"></a>Read Bitmap Dimensions and Type<br></h3><p><a href=\"http://developer.android.com/intl/zh-cn/reference/android/graphics/BitmapFactory.html\" target=\"_blank\" rel=\"external\">BitmapFactory</a>:根据不同的图片来源创建<code>Bitmap</code>对象，包括文件路径，流，字节数组；根据数据源选择合适的解码方法；使用这些方法构造<code>Bitmap</code>对象时需要分配内存；因此很容易导致<code>OOM</code>。不同的方法有不同的解码选项，我们需要通过<code>BitmapFactory.Options</code>来指定解码选项；例如在解码时，当指定<code>inJustDecodeBounds</code>属性为<code>true</code>来避免分配内存，这样会为<code>Bitmap</code>对象返回<code>null</code>，但是可以获得<code>outWidth</code>,<code>outHeight</code>,<code>outMimeType</code>；这个技巧可以让我们提前读取图片的尺寸以及类型从而避免构建<code>Bitmap</code>对象时的内存分配;<br><br><code>BitmapFactory.Options options = new BitmapFactory.Options()</code><br><code>options.inJustDecodeBounds = true</code><br><code>BitmapFactory.decodeResources(getResources, R.id.images, options)</code><br><code>int imageWidth = options.outWidth</code><br><code>int imageHeight = options.outHeight</code><br><code>String imageType = options.outMimeType</code><br>测试图 分辨率：5760x3240 类型: .jpg<br>测试结果：outWidth = 5760; outHeight=3240 outMimeType = image/jpeg<img src=\"http://img1.gamersky.com/image2010/06/20100626h_246/01.jpg\" alt=\"\"><br>注意：为了避免OOM，在解码之前应先检查它的尺寸；除非你相信提供给你的尺寸数据符合可用的内存要求；<br></p>\n<h3 id=\"Load-a-Scaled-Down-Version-to-memory\"><a href=\"#Load-a-Scaled-Down-Version-to-memory\" class=\"headerlink\" title=\"Load a Scaled Down Version to memory\"></a>Load a Scaled Down Version to memory<br></h3><p>现在已经知道了图片的尺寸，接下来我们可以考虑决定是要将原图还是将修改后的图加载到内存中；我们要考虑以下几个因素：<br></p>\n<ol>\n<li>评估加载完整图片耗费的内存；<br></li>\n<li>加载这张图片时的涉及到的其他内存需求<br></li>\n<li>加载这张图片的<code>ImageView</code>或者其他UI控件的尺寸；<br></li>\n<li>屏幕的分辨率以及尺寸；<br>例如：不应该把一个分辨率1024x768的图片加载到一个分辨率128x96的<code>ImageView</code>中<br>为了得到图片的低分辨率版本，我们需要设置<code>BitmapFactory.Options</code>中<code>inSampleSize</code>的值；例如图片的分辨率2048x1536，<code>inSampleSize</code>为4，那得到的位图的分辨率为512x384(假如我们采取的是ARGB_8888格式)。下面这个方法告诉我们怎么计算sample size：<br><br><pre><code><br>  public static int calculateInSampleSize (BitmapFactory.Options options,<br> int reqWidth, int reqHeight) {<br> final int height = options.outHeight;<br> final int width = options.outWidth;<br> int inSampleSize = 1;<br> if (height &gt; reqHeight || width &gt; reqWidth) {<pre><code>final int halfWidth = height /2;\nfinal int halfHeight = width /2;\nwhile (halfWidth / inSampleSize &gt; reqWidth &amp;&amp; halfHeight/ inSampleSize &gt; reqHeight) {\n        inSampleSize *=2；\n     }\n</code></pre> }<br> return inSampleSize;<br>   }</code></pre></li>\n</ol>\n<p><br>注意：inSampleSize最终为2的幂，否则会向下取最靠近的2的幂的值；<br><br><br>获取到inSampleSize之后，下面的方法来获得缩小后的图片的低分辨率版本；</p>\n<p><pre><code><br>    public static Bitmap decodeSampledBimapFromResources (Resources res, int resId, int reqWidth, int reqHeight) {<br>        BitmapFactory.Options options = new BitmapFactory.Options();<br>        options.inJustDecodeBounds = true;<br>        BitmapFactory.decodeResource(res, resId, options);<br>        options.inSampleSize = calculateInSampleSize(options, reqWidth, reqHeight);<br>        options.inJustDecodeBounds = false;<br>        return BitmapFactory.decodeResource(res, resId, options);<br>    }<br></code></pre>经过该方法后我们可以将任意大小的图片解码成低分辨率的版本来加载到内存和布局控件中；</p>\n<hr>\n<h1 id=\"question\"><a href=\"#question\" class=\"headerlink\" title=\"question\"></a>question</h1><hr>\n<ol>\n<li><a href=\"http://mobile.163.com/14/0421/08/9QBDVKM7001117A8_all.html\" target=\"_blank\" rel=\"external\">手机分辨率与相机像素的问题</a></li>\n<li>当我将上述图片降低分辨率时，我设置的reqWidth = 200, reqHeight =200, 我得到inSampleSize =16，解码后，得到的outWidth = 1080 outHeight = 606 而不是5760/16=360和3240/16=202   why?</li>\n<li>我将ImageView的layout_width = 200px，layout_height=200px；得到的效果不是方形；why？<br><br></li>\n</ol>\n<hr>\n<h1 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h1><hr>\n<p> 对于高分辨率的图片，为了获得低分辨率的版本，我们应先解码图片的边界，获得图片的尺寸及类型， 然后根据我们希望得到的分辨率获得inSamplseSize,再进行图片的全部解码；</p>\n","excerpt":"","more":"<h1 id=\"what\"><a href=\"#what\" class=\"headerlink\" title=\"what\"></a>what</h1><hr>\n<h1 id=\"Loading-large-bitmaps-efficently\"><a href=\"#Loading-large-bitmaps-efficently\" class=\"headerlink\" title=\"Loading large bitmaps efficently\"></a>Loading large bitmaps efficently</h1><p>  使用<code>Bitmap</code>可以提升UI的交互性，但是使用不当会造成异常<code>java.lang.OutOfMemory:bitmap size excedds VM budget</code>;原因如下：  </p>\n<ol>\n<li>移动设备会限制系统资源；系统至少为应用保留<code>16MB</code>的内存空间；.<a href=\"http://source.android.com/compatibility/downloads.html#android-60\">Android Compatibility Definition Document(CDD)</a> <strong>Section 3.7</Strong> Virtual Machine  Compatibility 中规定可以在多种设备下保持应用流畅度的最小运行时内存；应用应该被优化到可以在该最小运行时内存执行；当然，不同的设备会适当的提高这个限制；<br>2. <code>Bitmap</code>特别占用内存；例如：Galaxy Nexus 使用2592x1936（五百万像素）照相机；而<code>Bitmap</code>的配置为<code>ARGB_8888</code>(android2.3以上默认采取该格式，这意味每一个像素需要占用4Bytes)，如果把该图片加载到内存，需要占用<code>19MB</code>(2592x1936x4 bytes)的内存；<br>3. app中UI经常需要一次加载多个<code>Bitmap</code>，控件<code>ListView</code>,<code>GridView</code>,<code>ViewPager</code>的通常包含多个Bitmap，并且在屏幕的不可见区域仍然有很多Bitmap等着手指一滑把他们加载到可视区域；</li>\n</ol>\n<h2 id=\"lt-—–more-gt\"><a href=\"#lt-—–more-gt\" class=\"headerlink\" title=\"&lt;!—–more&gt;\"></a>&lt;!—–more&gt;</h2><h1 id=\"How\"><a href=\"#How\" class=\"headerlink\" title=\"How\"></a>How</h1><hr>\n<p>很多时候，图片的分辨率要高于手机屏幕的分辨率，为了匹配显示图片的控件，减少内存的开销，我们需要图片的低分辨率版本；<br></p>\n<h3 id=\"Read-Bitmap-Dimensions-and-Type\"><a href=\"#Read-Bitmap-Dimensions-and-Type\" class=\"headerlink\" title=\"Read Bitmap Dimensions and Type\"></a>Read Bitmap Dimensions and Type<br></h3><p><a href=\"http://developer.android.com/intl/zh-cn/reference/android/graphics/BitmapFactory.html\">BitmapFactory</a>:根据不同的图片来源创建<code>Bitmap</code>对象，包括文件路径，流，字节数组；根据数据源选择合适的解码方法；使用这些方法构造<code>Bitmap</code>对象时需要分配内存；因此很容易导致<code>OOM</code>。不同的方法有不同的解码选项，我们需要通过<code>BitmapFactory.Options</code>来指定解码选项；例如在解码时，当指定<code>inJustDecodeBounds</code>属性为<code>true</code>来避免分配内存，这样会为<code>Bitmap</code>对象返回<code>null</code>，但是可以获得<code>outWidth</code>,<code>outHeight</code>,<code>outMimeType</code>；这个技巧可以让我们提前读取图片的尺寸以及类型从而避免构建<code>Bitmap</code>对象时的内存分配;<br><br><code>BitmapFactory.Options options = new BitmapFactory.Options()</code><br><code>options.inJustDecodeBounds = true</code><br><code>BitmapFactory.decodeResources(getResources, R.id.images, options)</code><br><code>int imageWidth = options.outWidth</code><br><code>int imageHeight = options.outHeight</code><br><code>String imageType = options.outMimeType</code><br>测试图 分辨率：5760x3240 类型: .jpg<br>测试结果：outWidth = 5760; outHeight=3240 outMimeType = image/jpeg<img src=\"http://img1.gamersky.com/image2010/06/20100626h_246/01.jpg\" alt=\"\"><br>注意：为了避免OOM，在解码之前应先检查它的尺寸；除非你相信提供给你的尺寸数据符合可用的内存要求；<br></p>\n<h3 id=\"Load-a-Scaled-Down-Version-to-memory\"><a href=\"#Load-a-Scaled-Down-Version-to-memory\" class=\"headerlink\" title=\"Load a Scaled Down Version to memory\"></a>Load a Scaled Down Version to memory<br></h3><p>现在已经知道了图片的尺寸，接下来我们可以考虑决定是要将原图还是将修改后的图加载到内存中；我们要考虑以下几个因素：<br></p>\n<ol>\n<li>评估加载完整图片耗费的内存；<br></li>\n<li>加载这张图片时的涉及到的其他内存需求<br></li>\n<li>加载这张图片的<code>ImageView</code>或者其他UI控件的尺寸；<br></li>\n<li>屏幕的分辨率以及尺寸；<br>例如：不应该把一个分辨率1024x768的图片加载到一个分辨率128x96的<code>ImageView</code>中<br>为了得到图片的低分辨率版本，我们需要设置<code>BitmapFactory.Options</code>中<code>inSampleSize</code>的值；例如图片的分辨率2048x1536，<code>inSampleSize</code>为4，那得到的位图的分辨率为512x384(假如我们采取的是ARGB_8888格式)。下面这个方法告诉我们怎么计算sample size：<br><br><pre><code><br>  public static int calculateInSampleSize (BitmapFactory.Options options,<br> int reqWidth, int reqHeight) {<br> final int height = options.outHeight;<br> final int width = options.outWidth;<br> int inSampleSize = 1;<br> if (height &gt; reqHeight || width &gt; reqWidth) {<pre><code>final int halfWidth = height /2;\nfinal int halfHeight = width /2;\nwhile (halfWidth / inSampleSize &gt; reqWidth &amp;&amp; halfHeight/ inSampleSize &gt; reqHeight) {\n        inSampleSize *=2；\n     }\n</code></pre> }<br> return inSampleSize;<br>   }</li>\n</ol>\n<p></code></pre><br>注意：inSampleSize最终为2的幂，否则会向下取最靠近的2的幂的值；<br><br><br>获取到inSampleSize之后，下面的方法来获得缩小后的图片的低分辨率版本；</p>\n<p><pre><code><br>    public static Bitmap decodeSampledBimapFromResources (Resources res, int resId, int reqWidth, int reqHeight) {<br>        BitmapFactory.Options options = new BitmapFactory.Options();<br>        options.inJustDecodeBounds = true;<br>        BitmapFactory.decodeResource(res, resId, options);<br>        options.inSampleSize = calculateInSampleSize(options, reqWidth, reqHeight);<br>        options.inJustDecodeBounds = false;<br>        return BitmapFactory.decodeResource(res, resId, options);<br>    }<br></code></pre>经过该方法后我们可以将任意大小的图片解码成低分辨率的版本来加载到内存和布局控件中；</p>\n<hr>\n<h1 id=\"question\"><a href=\"#question\" class=\"headerlink\" title=\"question\"></a>question</h1><hr>\n<ol>\n<li><a href=\"http://mobile.163.com/14/0421/08/9QBDVKM7001117A8_all.html\">手机分辨率与相机像素的问题</a></li>\n<li>当我将上述图片降低分辨率时，我设置的reqWidth = 200, reqHeight =200, 我得到inSampleSize =16，解码后，得到的outWidth = 1080 outHeight = 606 而不是5760/16=360和3240/16=202   why?</li>\n<li>我将ImageView的layout_width = 200px，layout_height=200px；得到的效果不是方形；why？<br><br></li>\n</ol>\n<hr>\n<h1 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h1><hr>\n<p> 对于高分辨率的图片，为了获得低分辨率的版本，我们应先解码图片的边界，获得图片的尺寸及类型， 然后根据我们希望得到的分辨率获得inSamplseSize,再进行图片的全部解码；</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cj0q75u7l0000g0x83ui5r2mr","category_id":"cj0q75u7q0001g0x8tmdrqphp","_id":"cj0q75u7u0004g0x8xgpssw18"},{"post_id":"cj0q75u7w0005g0x8h35br8oq","category_id":"cj0q75u7y0006g0x89og7tjbs","_id":"cj0q75u810009g0x8t9konlkr"}],"PostTag":[{"post_id":"cj0q75u7l0000g0x83ui5r2mr","tag_id":"cj0q75u7s0002g0x81rjwlg65","_id":"cj0q75u7t0003g0x8mniibbo7"},{"post_id":"cj0q75u7w0005g0x8h35br8oq","tag_id":"cj0q75u7y0007g0x86qqfliky","_id":"cj0q75u800008g0x8sudvwedg"}],"Tag":[{"name":"android布局技巧 TextView","_id":"cj0q75u7s0002g0x81rjwlg65"},{"name":"bitmap","_id":"cj0q75u7y0007g0x86qqfliky"}]}}